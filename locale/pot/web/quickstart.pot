# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2014, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-16 17:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\sphinx\doc\web\quickstart.rst:4
# 24e2792e37954e359ff9ab897cabe1cd
msgid "Web Support Quick Start"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:7
# 33aa2b576c934569b9152727c608d4e1
msgid "Building Documentation Data"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:9
# 58359aa34fd042768ab393528b573661
msgid "To make use of the web support package in your application you'll need to build the data it uses.  This data includes pickle files representing documents, search indices, and node data that is used to track where comments and other things are in a document.  To do this you will need to create an instance of the :class:`~.WebSupport` class and call its :meth:`~.WebSupport.build` method::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:23
# 9f872aeb83144407be79e05dbe312fee
msgid "This will read reStructuredText sources from `srcdir` and place the necessary data in `builddir`.  The `builddir` will contain two sub-directories: one named \"data\" that contains all the data needed to display documents, search through documents, and add comments to documents.  The other directory will be called \"static\" and contains static files that should be served from \"/static\"."
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:31
# b188e637e77f444980256317557d2ed8
msgid "If you wish to serve static files from a path other than \"/static\", you can do so by providing the *staticdir* keyword argument when creating the :class:`~.WebSupport` object."
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:37
# c80a1dcd2cdb440eb29400279a40ac66
msgid "Integrating Sphinx Documents Into Your Webapp"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:39
# ab5d0ad4c68f4b5983f354b31d2dc9fa
msgid "Now that the data is built, it's time to do something useful with it.  Start off by creating a :class:`~.WebSupport` object for your application::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:47
# 210f193b37984bd991b10af6c1c1d71e
msgid "You'll only need one of these for each set of documentation you will be working with.  You can then call it's :meth:`~.WebSupport.get_document` method to access individual documents::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:53
# 3d2f6d75e7ff475389a1659d6d88a9ba
msgid "This will return a dictionary containing the following items:"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:55
# 87e3518f2c1f46fab3de422561336d32
msgid "**body**: The main body of the document as HTML"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:56
# 59be17672aaa4cb4988e6cb35b1aa2cc
msgid "**sidebar**: The sidebar of the document as HTML"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:57
# d60e66d4152f41f3b1db564ff248cfce
msgid "**relbar**: A div containing links to related documents"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:58
# 2a564269cd5c46faa89eee931a106db6
msgid "**title**: The title of the document"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:59
# 19f19da3cd4b43d997e7ee15ca0e420a
msgid "**css**: Links to css files used by Sphinx"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:60
# 4ece6cd8fd294efda30f18bf00ac0223
msgid "**js**: Javascript containing comment options"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:62
# 360196647d22407bb212a2f1f55623b2
msgid "This dict can then be used as context for templates.  The goal is to be easy to integrate with your existing templating system.  An example using `Jinja2 <http://jinja.pocoo.org/>`_ is:"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:99
# 38063f5aea7146ef97e1cb8106e70aa3
msgid "Authentication"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:101
# 49f21cade9eb42748878366ba42317d2
msgid "To use certain features such as voting, it must be possible to authenticate users.  The details of the authentication are left to your application.  Once a user has been authenticated you can pass the user's details to certain :class:`~.WebSupport` methods using the *username* and *moderator* keyword arguments.  The web support package will store the username with comments and votes.  The only caveat is that if you allow users to change their username you must update the websupport package's data::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:111
# 7f25718daed44b37af92136ac876f908
msgid "*username* should be a unique string which identifies a user, and *moderator* should be a boolean representing whether the user has moderation privilieges. The default value for *moderator* is *False*."
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:115
# a3e9678c1d434b22a4f80da57c7b558c
msgid "An example `Flask <http://flask.pocoo.org/>`_ function that checks whether a user is logged in and then retrieves a document is::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:130
# 2541c86de4e6456495aa4491ca586ba5
msgid "The first thing to notice is that the *docname* is just the request path.  This makes accessing the correct document easy from a single view.  If the user is authenticated, then the username and moderation status are passed along with the docname to :meth:`~.WebSupport.get_document`.  The web support package will then add this data to the ``COMMENT_OPTIONS`` that are used in the template."
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:138
# 9bf9ac1ce14647ed9401095acc9bf028
msgid "This only works works if your documentation is served from your document root. If it is served from another directory, you will need to prefix the url route with that directory, and give the `docroot` keyword argument when creating the web support object::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:149
# 57926771c56e44dfaaa39fb55293d6f0
msgid "Performing Searches"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:151
# a382d67400124d73b554c3cbdad293d4
msgid "To use the search form built-in to the Sphinx sidebar, create a function to handle requests to the url 'search' relative to the documentation root.  The user's search query will be in the GET parameters, with the key `q`.  Then use the :meth:`~sphinx.websupport.WebSupport.get_search_results` method to retrieve search results. In `Flask <http://flask.pocoo.org/>`_ that would be like this::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:163
# 793d0a468535454887e800771524cead
msgid "Note that we used the same template to render our search results as we did to render our documents.  That's because :meth:`~.WebSupport.get_search_results` returns a context dict in the same format that :meth:`~.WebSupport.get_document` does."
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:170
# f362e9ad62234b58b234c9663062404a
msgid "Comments & Proposals"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:172
# 68160b4e1d914fe687a636fb2fb2e07d
msgid "Now that this is done it's time to define the functions that handle the AJAX calls from the script.  You will need three functions.  The first function is used to add a new comment, and will call the web support method :meth:`~.WebSupport.add_comment`::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:189
# a8c7bf5e2e624101809e19b15978f7bd
msgid "You'll notice that both a `parent_id` and `node_id` are sent with the request. If the comment is being attached directly to a node, `parent_id` will be empty. If the comment is a child of another comment, then `node_id` will be empty. Then next function handles the retrieval of comments for a specific node, and is aptly named :meth:`~sphinx.websupport.WebSupport.get_data`::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:204
# b39a78c79db5425ead80660fa9ccfa93
msgid "The final function that is needed will call :meth:`~.WebSupport.process_vote`, and will handle user votes on comments::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:220
# 2e27b3fe1c3e4cb9857da3ecd0e6c2d9
msgid "Comment Moderation"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:222
# d3155bced9544ecc85e190470869c3a4
msgid "By default, all comments added through :meth:`~.WebSupport.add_comment` are automatically displayed.  If you wish to have some form of moderation, you can pass the `displayed` keyword argument::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:231
# c23650c90e874e1d88c547fcacebd0e8
msgid "You can then create a new view to handle the moderation of comments.  It will be called when a moderator decides a comment should be accepted and displayed::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:242
# c8b0245335934a25b611fe6c02e9b48e
msgid "Rejecting comments happens via comment deletion."
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:244
# 0fbed9869a7f41c78f651d58445490c9
msgid "To perform a custom action (such as emailing a moderator) when a new comment is added but not displayed, you can pass callable to the :class:`~.WebSupport` class when instantiating your support object::"
msgstr ""

#: ..\..\sphinx\doc\web\quickstart.rst:253
# 00839991e9d94c2ca8d4100310be7357
msgid "The moderation callback must take one argument, which will be the same comment dict that is returned by :meth:`add_comment`."
msgstr ""

