# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2014, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-30 17:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\sphinx\doc\extdev\domainapi.rst:4
# c187ba5bdc284080bc92686ebf05d515
msgid "Domain API"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain:1
# f993e442b6a34fdab270e634d92cda8f
msgid "A Domain is meant to be a group of \"object\" description directives for objects of a similar nature, and corresponding roles to create references to them.  Examples would be Python modules, classes, functions etc., elements of a templating language, Sphinx roles and directives, etc."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain:6
# 0abe2382a12d4bafb6f7539e6cec34a7
msgid "Each domain has a separate storage for information about existing objects and how to reference them in `self.data`, which must be a dictionary.  It also must implement several functions that expose the object information in a uniform way to parts of Sphinx that allow the user to reference or search for objects in a domain-agnostic way."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain:12
# 4674c5ace4c74d8a9e27a3beab1944f6
msgid "About `self.data`: since all object and cross-referencing information is stored on a BuildEnvironment instance, the `domain.data` object is also stored in the `env.domaindata` dict under the key `domain.name`.  Before the build process starts, every active domain is instantiated and given the environment object; the `domaindata` dict must then either be nonexistent or a dictionary whose 'version' key is equal to the domain class' :attr:`data_version` attribute.  Otherwise, `IOError` is raised and the pickled environment is discarded."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.clear_doc:1
# 3de6c3f87319451c89691fa4bee67cd8
msgid "Remove traces of a document in the domain-specific inventories."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.directive:1
# 8d805f891c5b45649e4fe7fda4ce2f49
msgid "Return a directive adapter class that always gives the registered directive its full name ('domain:name') as ``self.name``."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:1
# 7dc5ae4dc57c4e9ab891ebb9a304bdcc
msgid "Return an iterable of \"object descriptions\", which are tuples with five items:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:4
# 2e152830eb344e6f81a98d8fae58166d
msgid "`name`     -- fully qualified name"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:5
# a4bbc73c8d8847dc8cb70e32ed2aefb7
msgid "`dispname` -- name to display when searching/linking"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:6
# 492484f8ede74dd3b9c5d9d8d925bc1d
msgid "`type`     -- object type, a key in ``self.object_types``"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:7
# 49cc0d5952dc4dc9bd711607160f8be9
msgid "`docname`  -- the document where it is to be found"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:8
# d39cb615a26c41149882692f06e9414f
msgid "`anchor`   -- the anchor name for the object"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:9
# 5adc7326e50f433184839132778695c7
msgid "`priority` -- how \"important\" the object is (determines placement in search results)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:12
# ca1900d0013c4edea83759827dc16c16
msgid "1: default priority (placed before full-text matches)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:13
# a0cafceec4ee474089b01bed59a60792
msgid "0: object is important (placed before default-priority objects)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:14
# 77d5320a284d4770a4ce88a7d6c3dbe4
msgid "2: object is unimportant (placed after full-text matches)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:15
# b366691057e1406c9cc7c3dd0687e3dc
msgid "-1: object should not show up in search at all"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_type_name:1
# 62abe028841f4604b79a28c52cffb2f4
msgid "Return full name for given ObjType."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.process_doc:1
# f75ee4219f004db0b9b0f32b3c34ba5f
msgid "Process a document after it is read by the environment."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:1
# 59fbf926027d429c8f38cbd94821fd9b
msgid "Resolve the pending_xref *node* with the given *typ* and *target*."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:3
# 63bdcb5f0a134de2a8bbb08e4b938c96
msgid "This method should return a new node, to replace the xref node, containing the *contnode* which is the markup content of the cross-reference."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:7
# fd1b4b5430164f719b686002cc958be2
msgid "If no resolution can be found, None can be returned; the xref node will then given to the 'missing-reference' event, and if that yields no resolution, replaced by *contnode*."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:11
# 0bfb5b4fb4d84591bfe6edb20776f6d5
msgid "The method can also raise :exc:`sphinx.environment.NoUri` to suppress the 'missing-reference' event being emitted."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.role:1
# 23b41f00e5884a62a49102251b68547f
msgid "Return a role adapter function that always gives the registered role its full name ('domain:name') as the first argument."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.dangling_warnings:1
# bc877718ec7a44f78e600c1fea4ed934
msgid "role name -> a warning message if reference is missing"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.data_version:1
# 686524b3f01b4741978a6598e9b9fcaf
msgid "data version, bump this when the format of `self.data` changes"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.directives:1
# cba858c21b7f4d55a4db2c41f4d3ce1d
msgid "directive name -> directive class"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.indices:1
# 0a096db393ef46c1a026b299ef4cb450
msgid "a list of Index subclasses"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.initial_data:1
# aef1228b74c3479ba0418dec2120ed7d
msgid "data value for a fresh environment"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.label:1
# 1d8d913f92ea4d1b948d2557a8d20dd7
msgid "domain label: longer, more descriptive (used in messages)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.name:1
# 28cd22379f074d0f83ff6031219087e8
msgid "domain name: should be short, but unique"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.object_types:1
# 35beadd9df494e3fb7e54f459997378e
msgid "type (usually directive) name -> ObjType instance"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.roles:1
# 3160c73f512141a2b7d85a45af47e041
msgid "role name -> role callable"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:1
# c4476c9c5d554d0a9868cfc5e47310dc
msgid "An ObjType is the description for a type of object that a domain can document.  In the object_types attribute of Domain subclasses, object type names are mapped to instances of this class."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:5
# 0d651ceafa864463af5973c430ee6cda
msgid "Constructor arguments:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:7
# 7f67bd06e58b4b26b28ff4fb42ac9fe2
msgid "*lname*: localized name of the type (do not include domain name)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:8
# 79ff7e589030471298af93bc86be9a1c
msgid "*roles*: all the roles that can refer to an object of this type"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:9
# 2cbbb8cde4dc43529c09565de26ead64
msgid "*attrs*: object attributes -- currently only \"searchprio\" is known, which defines the object's priority in the full-text search index, see :meth:`Domain.get_objects()`."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:1
# bdded8e8159c43f78dfab03d52b0f367
msgid "An Index is the description for a domain-specific index.  To add an index to a domain, subclass Index, overriding the three name attributes:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:4
# 3f52959ba1b04b07886335ec573a7538
msgid "`name` is an identifier used for generating file names."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:5
# 6895bad4262d4392bf3a8d055f917f27
msgid "`localname` is the section title for the index."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:6
# 8fc2a80f7703492b84f9dd6c9b68d11b
msgid "`shortname` is a short name for the index, for use in the relation bar in HTML output.  Can be empty to disable entries in the relation bar."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:9
# ed91108861b642d5b251e3e9c88348fe
msgid "and providing a :meth:`generate()` method.  Then, add the index class to your domain's `indices` list.  Extensions can add indices to existing domains using :meth:`~sphinx.application.Sphinx.add_index_to_domain()`."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:1
# 4f8c75f8792a41169896a2a428c31ca8
msgid "Return entries for the index given by *name*.  If *docnames* is given, restrict to entries referring to these docnames."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:4
# 85b274733ca14bf9a6533b267bd2683d
msgid "The return value is a tuple of ``(content, collapse)``, where *collapse* is a boolean that determines if sub-entries should start collapsed (for output formats that support collapsing sub-entries)."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:8
# 1ab462441e1c491f9c8e99f0a681b2ea
msgid "*content* is a sequence of ``(letter, entries)`` tuples, where *letter* is the \"heading\" for the given *entries*, usually the starting letter."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:11
# de24fc922cf3450393befc428e355c6c
msgid "*entries* is a sequence of single entries, where a single entry is a sequence ``[name, subtype, docname, anchor, extra, qualifier, descr]``. The items in this sequence have the following meaning:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:15
# 9b03604af2424b909a9b6d9fc6a436d7
msgid "`name` -- the name of the index entry to be displayed"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:16
# 8211de0ac74a494e92faea174c686c8d
msgid "`subtype` -- sub-entry related type: 0 -- normal entry 1 -- entry with sub-entries 2 -- sub-entry"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:20
# 5df548bab5c54fe1b0451d0742d35232
msgid "`docname` -- docname where the entry is located"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:21
# 9f780c69784b4ec7a8b79812ba2f4bc0
msgid "`anchor` -- anchor for the entry within `docname`"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:22
# 0910273fefee4c188bb2f4dae3c093cd
msgid "`extra` -- extra info for the entry"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:23
# cd531e9ec80347f188d1d7bedfcdf511
msgid "`qualifier` -- qualifier for the description"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:24
# 5b5dfdcf23414ed8a0f276bcf32654c4
msgid "`descr` -- description for the entry"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:26
# ec727a632bdc4634a64ef4ef0b7ea7c4
msgid "Qualifier and description are not rendered e.g. in LaTeX output."
msgstr ""

