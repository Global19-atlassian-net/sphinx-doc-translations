# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2014, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-16 17:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\sphinx\doc\extdev\domainapi.rst:4
# ca4762b6c0e54b3a898671ee2e7f08e1
msgid "Domain API"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain:1
# 3780d211fe5d435d98c45e272fce7129
msgid "A Domain is meant to be a group of \"object\" description directives for objects of a similar nature, and corresponding roles to create references to them.  Examples would be Python modules, classes, functions etc., elements of a templating language, Sphinx roles and directives, etc."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain:6
# b753bb1d5dbd4996bff8e5f08abf4d42
msgid "Each domain has a separate storage for information about existing objects and how to reference them in `self.data`, which must be a dictionary.  It also must implement several functions that expose the object information in a uniform way to parts of Sphinx that allow the user to reference or search for objects in a domain-agnostic way."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain:12
# 3075ea797ac24b969e37ba6c0f02ce08
msgid "About `self.data`: since all object and cross-referencing information is stored on a BuildEnvironment instance, the `domain.data` object is also stored in the `env.domaindata` dict under the key `domain.name`.  Before the build process starts, every active domain is instantiated and given the environment object; the `domaindata` dict must then either be nonexistent or a dictionary whose 'version' key is equal to the domain class' :attr:`data_version` attribute.  Otherwise, `IOError` is raised and the pickled environment is discarded."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.clear_doc:1
# 2cfdf0a088fd4f629e8ae52f29fe3d23
msgid "Remove traces of a document in the domain-specific inventories."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.directive:1
# 77e838ff6fd94cbda39c817d5838c15e
msgid "Return a directive adapter class that always gives the registered directive its full name ('domain:name') as ``self.name``."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:1
# 92ea3f251cfe49bd9f90a024d011cff6
msgid "Return an iterable of \"object descriptions\", which are tuples with five items:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:4
# b6c5901c960e42d08bebed7df245cbbd
msgid "`name`     -- fully qualified name"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:5
# 209e4a675bcc4d3fbb47d87016572c80
msgid "`dispname` -- name to display when searching/linking"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:6
# 641224b5f8d54569bc27400ae541448c
msgid "`type`     -- object type, a key in ``self.object_types``"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:7
# f09a0873740e4296b37f36bade2f0401
msgid "`docname`  -- the document where it is to be found"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:8
# 03e44af4b99b45d98cec4848f98213f2
msgid "`anchor`   -- the anchor name for the object"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:9
# a2339baac2a24d2fb0dc1c4f7f727392
msgid "`priority` -- how \"important\" the object is (determines placement in search results)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:12
# d0cf375d9ef84ac09bbcc53954932611
msgid "1: default priority (placed before full-text matches)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:13
# bebe45b754b1412aa783233d890c0232
msgid "0: object is important (placed before default-priority objects)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:14
# 008591bc7f1a4afe874f3d9bb620bbe2
msgid "2: object is unimportant (placed after full-text matches)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_objects:15
# 3ce3c4087bcd4e09b81f1f5401d61fa8
msgid "-1: object should not show up in search at all"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.get_type_name:1
# a76f61e2a1b142a29dc3b737103f7aa1
msgid "Return full name for given ObjType."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.process_doc:1
# ac84f1ec7fb34b49a2c442c59acec1af
msgid "Process a document after it is read by the environment."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:1
# a4269a6a147845ac824f9788065667fe
msgid "Resolve the pending_xref *node* with the given *typ* and *target*."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:3
# ab5284f51bdf46fb80762a475169e46a
msgid "This method should return a new node, to replace the xref node, containing the *contnode* which is the markup content of the cross-reference."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:7
# ed5b4a7aebe645d789ff6531ff818d68
msgid "If no resolution can be found, None can be returned; the xref node will then given to the 'missing-reference' event, and if that yields no resolution, replaced by *contnode*."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.resolve_xref:11
# ffb3422768554d99b1a9a2458c0dba88
msgid "The method can also raise :exc:`sphinx.environment.NoUri` to suppress the 'missing-reference' event being emitted."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.role:1
# aa4373bf0f3040139bc5137504ee647e
msgid "Return a role adapter function that always gives the registered role its full name ('domain:name') as the first argument."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.dangling_warnings:1
# 333d7be2c3c842cb86829b3cec4d636d
msgid "role name -> a warning message if reference is missing"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.data_version:1
# c71a8166543b4729a891ee4659b7cb38
msgid "data version, bump this when the format of `self.data` changes"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.directives:1
# fb3edc9e957445ffa930b984c17d15fc
msgid "directive name -> directive class"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.indices:1
# 428a0b0d85ab4ed0b881bb4aef74fd7d
msgid "a list of Index subclasses"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.initial_data:1
# d202990da17f477d8975aee9e396bc8e
msgid "data value for a fresh environment"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.label:1
# 8b1200e198e442319af0c29305328523
msgid "domain label: longer, more descriptive (used in messages)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.name:1
# a98b73783697454b9912bf23ced75966
msgid "domain name: should be short, but unique"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.object_types:1
# 6b9bec3e5ce6410fa12ab22820c75862
msgid "type (usually directive) name -> ObjType instance"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Domain.roles:1
# 252cfde9385641fbb4d74197caeec6ed
msgid "role name -> role callable"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:1
# c8c9286b583f474b81c34b359e0cfd03
msgid "An ObjType is the description for a type of object that a domain can document.  In the object_types attribute of Domain subclasses, object type names are mapped to instances of this class."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:5
# 9f10e00a5b154f62b601830fa7951683
msgid "Constructor arguments:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:7
# 09c94f1779ec4c1d88c8e1a5796669d9
msgid "*lname*: localized name of the type (do not include domain name)"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:8
# efef4cb9628f49e7b35446cf4719bc01
msgid "*roles*: all the roles that can refer to an object of this type"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.ObjType:9
# 6fc0828a9f524126b2048aa1fbdf4156
msgid "*attrs*: object attributes -- currently only \"searchprio\" is known, which defines the object's priority in the full-text search index, see :meth:`Domain.get_objects()`."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:1
# 6c91a08da73a44f08f525230b0d7c2e7
msgid "An Index is the description for a domain-specific index.  To add an index to a domain, subclass Index, overriding the three name attributes:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:4
# 55aafbb3599048a78060c9bc10b33b75
msgid "`name` is an identifier used for generating file names."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:5
# 7bb46b7c58154917bcfccf254e51a256
msgid "`localname` is the section title for the index."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:6
# 1bbc0b68bec049eeb410a27e2bb1ebc9
msgid "`shortname` is a short name for the index, for use in the relation bar in HTML output.  Can be empty to disable entries in the relation bar."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index:9
# 4e258bb95fe940b0a95bda95b44831d0
msgid "and providing a :meth:`generate()` method.  Then, add the index class to your domain's `indices` list.  Extensions can add indices to existing domains using :meth:`~sphinx.application.Sphinx.add_index_to_domain()`."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:1
# 2e0fa1998d1d43a3ba8113d4d078f3a0
msgid "Return entries for the index given by *name*.  If *docnames* is given, restrict to entries referring to these docnames."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:4
# 120d08d947664908bc8e147842896e49
msgid "The return value is a tuple of ``(content, collapse)``, where *collapse* is a boolean that determines if sub-entries should start collapsed (for output formats that support collapsing sub-entries)."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:8
# bcbc142dfbfe48869e43bd4abae3d483
msgid "*content* is a sequence of ``(letter, entries)`` tuples, where *letter* is the \"heading\" for the given *entries*, usually the starting letter."
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:11
# b3aec4dee3874eff92fbc90c987be955
msgid "*entries* is a sequence of single entries, where a single entry is a sequence ``[name, subtype, docname, anchor, extra, qualifier, descr]``. The items in this sequence have the following meaning:"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:15
# fd67d74dd1bd4d18bd2ec886a0fa6024
msgid "`name` -- the name of the index entry to be displayed"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:16
# 2611187f4ab74f968de974a0d960c186
msgid "`subtype` -- sub-entry related type: 0 -- normal entry 1 -- entry with sub-entries 2 -- sub-entry"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:20
# 616bcdb5ca274607b6e7784dcbf7910e
msgid "`docname` -- docname where the entry is located"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:21
# c0900e51b02e4e4d991f8e8b59cdb004
msgid "`anchor` -- anchor for the entry within `docname`"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:22
# d69383cb231e4bdb9798f85be310a294
msgid "`extra` -- extra info for the entry"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:23
# 94b92781a40242cd8efdde11ab874adb
msgid "`qualifier` -- qualifier for the description"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:24
# 40a279c28a8c4c88aa727a8fe627363c
msgid "`descr` -- description for the entry"
msgstr ""

#: ..\..\sphinx\sphinx\domains\__init__.py:docstring of sphinx.domains.Index.generate:26
# dd76d65df22a4c5bb04c4cdb864d9a1b
msgid "Qualifier and description are not rendered e.g. in LaTeX output."
msgstr ""

