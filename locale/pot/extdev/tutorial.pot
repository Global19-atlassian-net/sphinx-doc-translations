# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2014, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-16 17:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\sphinx\doc\extdev\tutorial.rst:4
# 3e5c6d25921a4285826563873e286c83
msgid "Tutorial: Writing a simple extension"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:6
# 9551d31b5b6e4d2ab430fce61c1dbb98
msgid "This section is intended as a walkthrough for the creation of custom extensions. It covers the basics of writing and activating an extensions, as well as commonly used features of extensions."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:10
# a989335a2d01447ab61cdbcbf99e8f02
msgid "As an example, we will cover a \"todo\" extension that adds capabilities to include todo entries in the documentation, and collecting these in a central place.  (A similar \"todo\" extension is distributed with Sphinx.)"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:16
# 975275589d894b6daa199d9291760e24
msgid "Important objects"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:18
# 5242526ec9874bf384f35cbfb81fb92b
msgid "There are several key objects whose API you will use while writing an extension.  These are:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:27
# 4beedeb9b1ea4a2ea3a2e94ca6cee934
msgid "**Application**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:22
# 8daad322911545aa9bdd8a07fc41ef23
msgid "The application object (usually called ``app``) is an instance of :class:`.Sphinx`.  It controls the most high-level functionality, such as the setup of extensions, event dispatching and producing output (logging)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:26
# ef78539354c8465d85c1b117dc62de3e
msgid "If you have the environment object, the application is available as ``env.app``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:40
# 5ff1cfd64748456683dd615c75624d5b
msgid "**Environment**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:30
# 65067ef9d6c1463a9d5432a55a1bc7c9
msgid "The build environment object (usually called ``env``) is an instance of :class:`.BuildEnvironment`.  It is responsible for parsing the source documents stores all metadata about the document collection and is serialized after each build."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:35
# ac7ffbdb93f34941b75cc98135709478
msgid "Its API provides methods to do with access to metadata, resolving references, etc.  It can also be used by extensions to cache information that should persist for incremental rebuilds."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:39
# f087889ce3584d43a2dd34c59b61d16e
msgid "If you have the application or builder object, the environment is available as ``app.env`` or ``builder.env``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:49
# e6af1b5b20b149aa8956cb59ae787703
msgid "**Builder**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:43
# 73c27068ec5a4b738e4bc0e8832f0566
msgid "The builder object (usually called ``builder``) is an instance of a specific subclass of :class:`.Builder`.  Each builder class knows how to convert the parsed documents into an output format, or otherwise process them (e.g. check external links)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:48
# afa5d57699cb478a9ac8deeed3cba95c
msgid "If you have the application object, the environment is available as ``app.builder``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:57
# 3c4af9fe61514ac881f62890a45c8102
msgid "**Config**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:52
# 50eb07154c714a5f9185d8c39329a91d
msgid "The config object (usually called ``config``) provides the values of configuration values set in :file:`conf.py` as attributes.  It is an instance of :class:`.Config`."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:56
# c7fb2ad291a64e1a95361a202e32bcfc
msgid "The config is available as ``app.config`` or ``env.config``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:60
# 7a47d2dc4260487a8d5dd80173d554c3
msgid "Build Phases"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:62
# 141d65e1e95d469b9db24a0edd0d0826
msgid "One thing that is vital in order to understand extension mechanisms is the way in which a Sphinx project is built: this works in several phases."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:65
# 6277039d146d46e1ad45c5930c7fcce9
msgid "**Phase 0: Initialization**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:67
# 1b103a04c0b24bffa9b9c76a681fad09
msgid "In this phase, almost nothing interesting for us happens.  The source directory is searched for source files, and extensions are initialized. Should a stored build environment exist, it is loaded, otherwise a new one is created."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:72
# 3949787d93a54d269780180674f356c2
msgid "**Phase 1: Reading**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:74
# cca94140cd924ff3b8617f41f1272ac4
msgid "In Phase 1, all source files (and on subsequent builds, those that are new or changed) are read and parsed.  This is the phase where directives and roles are encountered by the docutils, and the corresponding code is executed.  The output of this phase is a *doctree* for each source files, that is a tree of docutils nodes.  For document elements that aren't fully known until all existing files are read, temporary nodes are created."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:81
# 077e7de7d9ff4b54a5a0bd6643d4f968
msgid "There are nodes provided by docutils, which are documented `in the docutils documentation <http://docutils.sourceforge.net/docs/ref/doctree.html>`__. Additional nodes are provided by Sphinx and :ref:`documented here <nodes>`."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:85
# e17cdf2c45ad49e8ad76d6f7e0c2b99f
msgid "During reading, the build environment is updated with all meta- and cross reference data of the read documents, such as labels, the names of headings, described Python objects and index entries.  This will later be used to replace the temporary nodes."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:90
# f9252afd214b412ea57a172cff59742d
msgid "The parsed doctrees are stored on the disk, because it is not possible to hold all of them in memory."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:93
# 21ce457c116b44bca2b2c8c7302336c9
msgid "**Phase 2: Consistency checks**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:95
# 5c1a86a082864a3f8c186b9a8389bffb
msgid "Some checking is done to ensure no surprises in the built documents."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:97
# 36bc689fedcb41eb8737566f0971289e
msgid "**Phase 3: Resolving**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:99
# c2925f4b9cae4a49af1680dfe1af6e4a
msgid "Now that the metadata and cross-reference data of all existing documents is known, all temporary nodes are replaced by nodes that can be converted into output.  For example, links are created for object references that exist, and simple literal nodes are created for those that don't."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:104
# adac52e075bb4909a352f43869503c7b
msgid "**Phase 4: Writing**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:106
# 9fc05609d34e4c8394d94b2b32aae83c
msgid "This phase converts the resolved doctrees to the desired output format, such as HTML or LaTeX.  This happens via a so-called docutils writer that visits the individual nodes of each doctree and produces some output in the process."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:112
# 7e25d7954f0a4ef5a81e4413ee314457
msgid "Some builders deviate from this general build plan, for example, the builder that checks external links does not need anything more than the parsed doctrees and therefore does not have phases 2--4."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:118
# e7c124c0e7104431a1e0cb59bd61ac8b
msgid "Extension Design"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:120
# c84e0c3a1aac489eb3e53922eef46440
msgid "We want the extension to add the following to Sphinx:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:122
# 785b94db330d4aac8ddf877e1a261d87
msgid "A \"todo\" directive, containing some content that is marked with \"TODO\", and only shown in the output if a new config value is set.  (Todo entries should not be in the output by default.)"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:126
# 9ea5c81075504a18813ba989cd3d6439
msgid "A \"todolist\" directive that creates a list of all todo entries throughout the documentation."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:129
# 337011975750490e902fe1c6b3ad5cb7
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:131
# 98997db81f5840d9b9cd81bbe973cb35
msgid "New directives, called ``todo`` and ``todolist``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:132
# 8c2e24bc4bb749ce996d171c45d153b3
msgid "New document tree nodes to represent these directives, conventionally also called ``todo`` and ``todolist``.  We wouldn't need new nodes if the new directives only produced some content representable by existing nodes."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:135
# c9f6cba505294443bce016e12deaa428
msgid "A new config value ``todo_include_todos`` (config value names should start with the extension name, in order to stay unique) that controls whether todo entries make it into the output."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:138
# 7bdaf70b543946b583eb95ed927e1eca
msgid "New event handlers: one for the :event:`doctree-resolved` event, to replace the todo and todolist nodes, and one for :event:`env-purge-doc` (the reason for that will be covered later)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:144
# bf50b62ea59e4615bffe52cf22f838b4
msgid "The Setup Function"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:148
# 79a6c8aa8f934e2d98413289504171fc
msgid "The new elements are added in the extension's setup function.  Let us create a new Python module called :file:`todo.py` and add the setup function::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:165
# 9d71a16dc64d483e933990a8aed24079
msgid "The calls in this function refer to classes and functions not yet written.  What the individual calls do is the following:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:168
# 1dac5026ba4641178af3ffd88c143424
msgid ":meth:`~Sphinx.add_config_value` lets Sphinx know that it should recognize the new *config value* ``todo_include_todos``, whose default value should be ``False`` (this also tells Sphinx that it is a boolean value)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:172
# c43f04e054004e639448bcb11bb9d736
msgid "If the third argument was ``True``, all documents would be re-read if the config value changed its value.  This is needed for config values that influence reading (build phase 1)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:176
# 83f0f46a18a6483ba066e5fcb8709724
msgid ":meth:`~Sphinx.add_node` adds a new *node class* to the build system.  It also can specify visitor functions for each supported output format.  These visitor functions are needed when the new nodes stay until phase 4 -- since the ``todolist`` node is always replaced in phase 3, it doesn't need any."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:181
# c0c999a13fe642cebd8615e39f56ee6b
msgid "We need to create the two node classes ``todo`` and ``todolist`` later."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:183
# 8ac626d01dd54a9888102927596f5791
msgid ":meth:`~Sphinx.add_directive` adds a new *directive*, given by name and class."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:185
# e372aba3e08f48f78541669c75ded192
msgid "The handler functions are created later."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:187
# a3ea832286394160a522f3d0c4acb378
msgid "Finally, :meth:`~Sphinx.connect` adds an *event handler* to the event whose name is given by the first argument.  The event handler function is called with several arguments which are documented with the event."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:193
# 9142444345484499a1e5fdd2a664ced5
msgid "The Node Classes"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:195
# 0f60755bcdc240739ae5fc30a88ec26b
msgid "Let's start with the node classes::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:211
# 65e5ba5a6281477a9b3245dcf86b7d8e
msgid "Node classes usually don't have to do anything except inherit from the standard docutils classes defined in :mod:`docutils.nodes`.  ``todo`` inherits from ``Admonition`` because it should be handled like a note or warning, ``todolist`` is just a \"general\" node."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:218
# c728fb43112f4f2ea865dc3143b53a37
msgid "Many extensions will not have to create their own node classes and work fine with the nodes already provided by `docutils <http://docutils.sourceforge.net/docs/ref/doctree.html>`__ and :ref:`Sphinx <nodes>`."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:225
# b1cb984a65bf460e81c88f097fe86d6d
msgid "The Directive Classes"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:227
# fd207bfef1474f779a28bc53c232a8a0
msgid "A directive class is a class deriving usually from :class:`docutils.parsers.rst.Directive`.  The directive interface is also covered in detail in the `docutils documentation`_; the important thing is that the class has attributes that configure the allowed markup and a method ``run`` that returns a list of nodes."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:233
# 69fe046c3fc6456b85195630719dcecb
msgid "The ``todolist`` directive is quite simple::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:242
# 864b88daae6243b19a332c66b9f8c12e
msgid "An instance of our ``todolist`` node class is created and returned.  The todolist directive has neither content nor arguments that need to be handled."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:245
# 9bb320c19cb84c27ba5b8fe1c0be8af9
msgid "The ``todo`` directive function looks like this::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:275
# 44549c0f8b634c6ea5f51eb2ad0e98fb
msgid "Several important things are covered here. First, as you can see, you can refer to the build environment instance using ``self.state.document.settings.env``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:278
# 5f797cc933c34020aa11bd73ce637ac4
msgid "Then, to act as a link target (from the todolist), the todo directive needs to return a target node in addition to the todo node.  The target ID (in HTML, this will be the anchor name) is generated by using ``env.new_serialno`` which returns a new unique integer on each call and therefore leads to unique target names.  The target node is instantiated without any text (the first two arguments)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:285
# 4de2b7b7a0cf4cd0ab1f760d1ee72464
msgid "An admonition is created using a standard docutils function (wrapped in Sphinx for docutils cross-version compatibility).  The first argument gives the node class, in our case ``todo``.  The third argument gives the admonition title (use ``arguments`` here to let the user specify the title).  A list of nodes is returned from ``make_admonition``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:291
# 257ceaa8434f4071b26e228667d93218
msgid "Then, the todo node is added to the environment.  This is needed to be able to create a list of all todo entries throughout the documentation, in the place where the author puts a ``todolist`` directive.  For this case, the environment attribute ``todo_all_todos`` is used (again, the name should be unique, so it is prefixed by the extension name).  It does not exist when a new environment is created, so the directive must check and create it if necessary.  Various information about the todo entry's location are stored along with a copy of the node."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:300
# 0b1191256fa34392ae6ce5f74dd881cb
msgid "In the last line, the nodes that should be put into the doctree are returned: the target node and the admonition node."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:303
# bcba462bd4ca4dfb9e2df1dadb3200d5
msgid "The node structure that the directive returns looks like this::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:321
# 4119f479a0ec4103ab5e244113f761a2
msgid "The Event Handlers"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:323
# 1ef5dd2b3f2942d0b3f962b2d0695d39
msgid "Finally, let's look at the event handlers.  First, the one for the :event:`env-purge-doc` event::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:332
# e111ab5abe9f40cba12ad8d8755fdfc0
msgid "Since we store information from source files in the environment, which is persistent, it may become out of date when the source file changes.  Therefore, before each source file is read, the environment's records of it are cleared, and the :event:`env-purge-doc` event gives extensions a chance to do the same. Here we clear out all todos whose docname matches the given one from the ``todo_all_todos`` list.  If there are todos left in the document, they will be added again during parsing."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:340
# 799313ba067e40749b5826f740000897
msgid "The other handler belongs to the :event:`doctree-resolved` event.  This event is emitted at the end of phase 3 and allows custom resolving to be done::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:384
# a8db32abf9324f06b8615dd25c79da74
msgid "It is a bit more involved.  If our new \"todo_include_todos\" config value is false, all todo and todolist nodes are removed from the documents."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:387
# 98161f09242c4bd8a555ae49d7a2c580
msgid "If not, todo nodes just stay where and how they are.  Todolist nodes are replaced by a list of todo entries, complete with backlinks to the location where they come from.  The list items are composed of the nodes from the todo entry and docutils nodes created on the fly: a paragraph for each entry, containing text that gives the location, and a link (reference node containing an italic node) with the backreference.  The reference URI is built by ``app.builder.get_relative_uri`` which creates a suitable URI depending on the used builder, and appending the todo node's (the target's) ID as the anchor name."
msgstr ""

