# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2014, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-30 17:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\sphinx\doc\extdev\tutorial.rst:4
# e950264128a9492880c090533b4dfad8
msgid "Tutorial: Writing a simple extension"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:6
# a55cf82f267f4422a33d4eb5b75f96d6
msgid "This section is intended as a walkthrough for the creation of custom extensions. It covers the basics of writing and activating an extensions, as well as commonly used features of extensions."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:10
# 69dd213e12ee47079f040bcf3c87bd66
msgid "As an example, we will cover a \"todo\" extension that adds capabilities to include todo entries in the documentation, and collecting these in a central place.  (A similar \"todo\" extension is distributed with Sphinx.)"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:16
# 6e51c097a7e846c5a652ec6741680535
msgid "Important objects"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:18
# 988aa9c8c1ab4c5cb5c6d2946306eb97
msgid "There are several key objects whose API you will use while writing an extension.  These are:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:27
# f8a8d954dccf4842837d78d27223b5fd
msgid "**Application**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:22
# 7fd9e38308914d9e8c275731cfa9b8e5
msgid "The application object (usually called ``app``) is an instance of :class:`.Sphinx`.  It controls the most high-level functionality, such as the setup of extensions, event dispatching and producing output (logging)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:26
# bd678603b80b4946912fdc90746f659c
msgid "If you have the environment object, the application is available as ``env.app``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:40
# bc34a0ca95cd4e70bf87948984abee91
msgid "**Environment**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:30
# 8e4f665c09d64e5aaf61625a7023602b
msgid "The build environment object (usually called ``env``) is an instance of :class:`.BuildEnvironment`.  It is responsible for parsing the source documents stores all metadata about the document collection and is serialized after each build."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:35
# ba5fd2f6c6244b20830f3dad0c48779f
msgid "Its API provides methods to do with access to metadata, resolving references, etc.  It can also be used by extensions to cache information that should persist for incremental rebuilds."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:39
# 4ca627fd8f1f4bbd849c8966a0f86da7
msgid "If you have the application or builder object, the environment is available as ``app.env`` or ``builder.env``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:49
# 3563cc0e293647e1b60cbc4df6297f9a
msgid "**Builder**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:43
# c30ecd4f92fd4e28bb9551b16c8141b0
msgid "The builder object (usually called ``builder``) is an instance of a specific subclass of :class:`.Builder`.  Each builder class knows how to convert the parsed documents into an output format, or otherwise process them (e.g. check external links)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:48
# e72a3e0bbc9642b7aa3f4f438ddcfe29
msgid "If you have the application object, the environment is available as ``app.builder``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:57
# 969ba8d1324943c8a46461c089a32b85
msgid "**Config**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:52
# 7863d46c9c2e419a900cda7f3a6dbffb
msgid "The config object (usually called ``config``) provides the values of configuration values set in :file:`conf.py` as attributes.  It is an instance of :class:`.Config`."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:56
# f3bcef9d9d4847579258d52f7bc8947c
msgid "The config is available as ``app.config`` or ``env.config``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:60
# 7e1bc21b91eb410b92ce3d97f2c526d4
msgid "Build Phases"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:62
# eda33cc9f6814e0b8797f528676d110d
msgid "One thing that is vital in order to understand extension mechanisms is the way in which a Sphinx project is built: this works in several phases."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:65
# 664fd469f44d4338bf1caec909e3ce13
msgid "**Phase 0: Initialization**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:67
# ebc49c9bf4e24a9facf1fa8e2df3dc58
msgid "In this phase, almost nothing interesting for us happens.  The source directory is searched for source files, and extensions are initialized. Should a stored build environment exist, it is loaded, otherwise a new one is created."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:72
# b4e83ee9c5744dd08717d15e196e48fd
msgid "**Phase 1: Reading**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:74
# a1447d4de0c743a3bd22ddaa1f39a519
msgid "In Phase 1, all source files (and on subsequent builds, those that are new or changed) are read and parsed.  This is the phase where directives and roles are encountered by the docutils, and the corresponding code is executed.  The output of this phase is a *doctree* for each source files, that is a tree of docutils nodes.  For document elements that aren't fully known until all existing files are read, temporary nodes are created."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:81
# e556b553590d49b483aa1f3a57e4f49b
msgid "There are nodes provided by docutils, which are documented `in the docutils documentation <http://docutils.sourceforge.net/docs/ref/doctree.html>`__. Additional nodes are provided by Sphinx and :ref:`documented here <nodes>`."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:85
# e05768461e914a2e838ba3d31c3cc826
msgid "During reading, the build environment is updated with all meta- and cross reference data of the read documents, such as labels, the names of headings, described Python objects and index entries.  This will later be used to replace the temporary nodes."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:90
# 42775c056b844961956524b459fcec47
msgid "The parsed doctrees are stored on the disk, because it is not possible to hold all of them in memory."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:93
# d41335669f664926a74fd5213ffb97df
msgid "**Phase 2: Consistency checks**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:95
# 2302f221109e4ac4bc1f69ecd783d98e
msgid "Some checking is done to ensure no surprises in the built documents."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:97
# a468fbbb2ee7437abb7e26abef4c1ab4
msgid "**Phase 3: Resolving**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:99
# c55334b284b44db99fc81156e1a36ac5
msgid "Now that the metadata and cross-reference data of all existing documents is known, all temporary nodes are replaced by nodes that can be converted into output.  For example, links are created for object references that exist, and simple literal nodes are created for those that don't."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:104
# 760d38002a4342ce8a375e4a72b27ebd
msgid "**Phase 4: Writing**"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:106
# b520cc2db4a9416198eee26f3edaa616
msgid "This phase converts the resolved doctrees to the desired output format, such as HTML or LaTeX.  This happens via a so-called docutils writer that visits the individual nodes of each doctree and produces some output in the process."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:112
# 35e813afb2164d47b46e0a719bd0c550
msgid "Some builders deviate from this general build plan, for example, the builder that checks external links does not need anything more than the parsed doctrees and therefore does not have phases 2--4."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:118
# 0e2751c876a841278d25b8a09d8789d3
msgid "Extension Design"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:120
# 316574aab179413c842d2b32de3bb39b
msgid "We want the extension to add the following to Sphinx:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:122
# f14e0d02e8c240d089a18bfee3c08d19
msgid "A \"todo\" directive, containing some content that is marked with \"TODO\", and only shown in the output if a new config value is set.  (Todo entries should not be in the output by default.)"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:126
# 34a64e6652b74a2d91cc3e36801ff127
msgid "A \"todolist\" directive that creates a list of all todo entries throughout the documentation."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:129
# 10aff7c8205b4f7f94b95c47475f57af
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:131
# 2ce2c81542424e1182cefe6685de26ee
msgid "New directives, called ``todo`` and ``todolist``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:132
# 4a5a98bafbdd499088e6d75fbbc31634
msgid "New document tree nodes to represent these directives, conventionally also called ``todo`` and ``todolist``.  We wouldn't need new nodes if the new directives only produced some content representable by existing nodes."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:135
# 6ffe18d751e145a59058bd00f5edcc93
msgid "A new config value ``todo_include_todos`` (config value names should start with the extension name, in order to stay unique) that controls whether todo entries make it into the output."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:138
# 17f2bb1eac8a479e92bf522af1c4a6db
msgid "New event handlers: one for the :event:`doctree-resolved` event, to replace the todo and todolist nodes, and one for :event:`env-purge-doc` (the reason for that will be covered later)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:144
# 18be478879594785bca59e0e0c4a77f3
msgid "The Setup Function"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:148
# 1a690033992044a99a57bd93bd569998
msgid "The new elements are added in the extension's setup function.  Let us create a new Python module called :file:`todo.py` and add the setup function::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:165
# 086ea207783648bdaaa9c6ee785bd30a
msgid "The calls in this function refer to classes and functions not yet written.  What the individual calls do is the following:"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:168
# 4d3be520dd3a4f63ae0c8896980a94bd
msgid ":meth:`~Sphinx.add_config_value` lets Sphinx know that it should recognize the new *config value* ``todo_include_todos``, whose default value should be ``False`` (this also tells Sphinx that it is a boolean value)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:172
# 4268077685184b5e804fb863c1db0e00
msgid "If the third argument was ``True``, all documents would be re-read if the config value changed its value.  This is needed for config values that influence reading (build phase 1)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:176
# 8fc4d75de77242649a5b8f602d580f71
msgid ":meth:`~Sphinx.add_node` adds a new *node class* to the build system.  It also can specify visitor functions for each supported output format.  These visitor functions are needed when the new nodes stay until phase 4 -- since the ``todolist`` node is always replaced in phase 3, it doesn't need any."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:181
# dd5a8548784143d8bef4e62bc84ebc80
msgid "We need to create the two node classes ``todo`` and ``todolist`` later."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:183
# f56f163597a24743a02aba99852c1911
msgid ":meth:`~Sphinx.add_directive` adds a new *directive*, given by name and class."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:185
# d251709427e94b6eb5b53e354188beb0
msgid "The handler functions are created later."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:187
# 4a6a1b02dfe2439ca88dd23bc0552c4f
msgid "Finally, :meth:`~Sphinx.connect` adds an *event handler* to the event whose name is given by the first argument.  The event handler function is called with several arguments which are documented with the event."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:193
# 86fe3e65385b40edb98588269b873fcb
msgid "The Node Classes"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:195
# 9c7002bfc6cb4029ae09fa3c597cd204
msgid "Let's start with the node classes::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:211
# b757ea0316a743eab39a29c3c03b6a8b
msgid "Node classes usually don't have to do anything except inherit from the standard docutils classes defined in :mod:`docutils.nodes`.  ``todo`` inherits from ``Admonition`` because it should be handled like a note or warning, ``todolist`` is just a \"general\" node."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:218
# 790979e7a51347f2914d3868a0a666fc
msgid "Many extensions will not have to create their own node classes and work fine with the nodes already provided by `docutils <http://docutils.sourceforge.net/docs/ref/doctree.html>`__ and :ref:`Sphinx <nodes>`."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:225
# 29e68fb711c24b579bcd112709b4f390
msgid "The Directive Classes"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:227
# ae474f21b4e84a2287112dbe5d0c5d81
msgid "A directive class is a class deriving usually from :class:`docutils.parsers.rst.Directive`.  The directive interface is also covered in detail in the `docutils documentation`_; the important thing is that the class has attributes that configure the allowed markup and a method ``run`` that returns a list of nodes."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:233
# 21f5f654d567408590033a5d13ee22ae
msgid "The ``todolist`` directive is quite simple::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:242
# 12a547eabf7248faa2abafd0bc112fdb
msgid "An instance of our ``todolist`` node class is created and returned.  The todolist directive has neither content nor arguments that need to be handled."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:245
# e619dccdb48046a59b2b3a406c4e6487
msgid "The ``todo`` directive function looks like this::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:275
# 18cd297597e74793b6e9256c431b4f2b
msgid "Several important things are covered here. First, as you can see, you can refer to the build environment instance using ``self.state.document.settings.env``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:278
# a28b47d67bb14f7b9e817a0368985301
msgid "Then, to act as a link target (from the todolist), the todo directive needs to return a target node in addition to the todo node.  The target ID (in HTML, this will be the anchor name) is generated by using ``env.new_serialno`` which returns a new unique integer on each call and therefore leads to unique target names.  The target node is instantiated without any text (the first two arguments)."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:285
# 946c3fc425b14104814518a1d41a0545
msgid "An admonition is created using a standard docutils function (wrapped in Sphinx for docutils cross-version compatibility).  The first argument gives the node class, in our case ``todo``.  The third argument gives the admonition title (use ``arguments`` here to let the user specify the title).  A list of nodes is returned from ``make_admonition``."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:291
# 6355f2f392d24ca1bbce7de499f83cd1
msgid "Then, the todo node is added to the environment.  This is needed to be able to create a list of all todo entries throughout the documentation, in the place where the author puts a ``todolist`` directive.  For this case, the environment attribute ``todo_all_todos`` is used (again, the name should be unique, so it is prefixed by the extension name).  It does not exist when a new environment is created, so the directive must check and create it if necessary.  Various information about the todo entry's location are stored along with a copy of the node."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:300
# c4855cb094404db699c916a5eacbf10a
msgid "In the last line, the nodes that should be put into the doctree are returned: the target node and the admonition node."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:303
# aeca8472fd824b248916616b2b0e5b31
msgid "The node structure that the directive returns looks like this::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:321
# 79cbd91eaa44478f9f767eb670820e31
msgid "The Event Handlers"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:323
# cdd22b466414478f971d1d4979492508
msgid "Finally, let's look at the event handlers.  First, the one for the :event:`env-purge-doc` event::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:332
# 2beb5cfc898947a4b60f6601ba87e094
msgid "Since we store information from source files in the environment, which is persistent, it may become out of date when the source file changes.  Therefore, before each source file is read, the environment's records of it are cleared, and the :event:`env-purge-doc` event gives extensions a chance to do the same. Here we clear out all todos whose docname matches the given one from the ``todo_all_todos`` list.  If there are todos left in the document, they will be added again during parsing."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:340
# d215325c88ed42feb283875732979ba8
msgid "The other handler belongs to the :event:`doctree-resolved` event.  This event is emitted at the end of phase 3 and allows custom resolving to be done::"
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:384
# 9c48794755ab437cb5586d7af8a2cf02
msgid "It is a bit more involved.  If our new \"todo_include_todos\" config value is false, all todo and todolist nodes are removed from the documents."
msgstr ""

#: ..\..\sphinx\doc\extdev\tutorial.rst:387
# 52a262f22c064ee8a30f89d9422ab64c
msgid "If not, todo nodes just stay where and how they are.  Todolist nodes are replaced by a list of todo entries, complete with backlinks to the location where they come from.  The list items are composed of the nodes from the todo entry and docutils nodes created on the fly: a paragraph for each entry, containing text that gives the location, and a link (reference node containing an italic node) with the backreference.  The reference URI is built by ``app.builder.get_relative_uri`` which creates a suitable URI depending on the used builder, and appending the todo node's (the target's) ID as the anchor name."
msgstr ""

