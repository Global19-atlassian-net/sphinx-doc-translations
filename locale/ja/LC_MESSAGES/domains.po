# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2016, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# 
# Translators:
# Takayuki Shimizukawa <shimizukawa@gmail.com>, 2014-2015
msgid ""
msgstr ""
"Project-Id-Version: sphinx-doc-1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-16 05:36+0000\n"
"PO-Revision-Date: 2016-01-11 15:17+0000\n"
"Last-Translator: sphinx-users.jp <shimizukawa+sphinxjp@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/sphinx-doc/sphinx-doc-1_3/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../domains.rst:6
msgid "Sphinx Domains"
msgstr "Sphinxドメイン"

#: ../../domains.rst:11
msgid "What is a Domain?"
msgstr "ドメインとは何か？"

#: ../../domains.rst:13
msgid ""
"Originally, Sphinx was conceived for a single project, the documentation of "
"the Python language.  Shortly afterwards, it was made available for everyone"
" as a documentation tool, but the documentation of Python modules remained "
"deeply built in -- the most fundamental directives, like ``function``, were "
"designed for Python objects.  Since Sphinx has become somewhat popular, "
"interest developed in using it for many different purposes: C/C++ projects, "
"JavaScript, or even reStructuredText markup (like in this documentation)."
msgstr "当初、Sphinxは一つのプロジェクトと、Pythonの言語のドキュメントのために作られました。その後少し経って、汎用的なドキュメントツールとして作り直されましたが、Pythonモジュールのドキュメントのため、という部分はツールの奥深くまで根を伸ばしたままでした。 ``function`` などのもっとも基本的なディレクティブは、Pythonのオブジェクトのために設計されました。しばらくたって、Sphinxはいくらか人気が出てきて、C/C++のプロジェクト、JavaScript, reStructuredText(このドキュメントのように)など、さまざまな異なる目的で使用したい、という要求が出てきました。"

#: ../../domains.rst:21
msgid ""
"While this was always possible, it is now much easier to easily support "
"documentation of projects using different programming languages or even ones"
" not supported by the main Sphinx distribution, by providing a **domain** "
"for every such purpose."
msgstr "今までも書けないことはありませんでしたが、1.0からは、もっと簡単に、Sphinxでサポートしていない異なるプログラミング言語を使用したプロジェクトのドキュメントでも使える用になりました。 **ドメイン** という機能がこれを可能にします。"

#: ../../domains.rst:26
msgid ""
"A domain is a collection of markup (reStructuredText :term:`directive`\\ s "
"and :term:`role`\\ s) to describe and link to :term:`object`\\ s belonging "
"together, e.g. elements of a programming language.  Directive and role names"
" in a domain have names like ``domain:name``, e.g. ``py:function``.  Domains"
" can also provide custom indices (like the Python Module Index)."
msgstr "ドメインというのは、説明のためのマークアップ(reStructuredTextの :term:`ディレクティブ` と :term:`ロール`)と、プログラミング言語の構成部品と関連する :term:`オブジェクト` へのリンクによってできています。ドメインに属するディレクティブとロール名は ``py:function`` などのように、 ``ドメイン:名前:`` という名前を持ちます。ドメインを使って、Pythonのモジュール索引のような、専用の索引作成もできます。"

#: ../../domains.rst:32
msgid ""
"Having domains means that there are no naming problems when one set of "
"documentation wants to refer to e.g. C++ and Python classes.  It also means "
"that extensions that support the documentation of whole new languages are "
"much easier to write."
msgstr "ドメインがあるということは、C++とPythonの両方のクラスに言及したいようなドキュメントを書く場合でも、名前が衝突する問題がない、ということです。まったく新しい言語のドキュメントをサポートするのも簡単になります。"

#: ../../domains.rst:37
msgid ""
"This section describes what the domains that come with Sphinx provide.  The "
"domain API is documented as well, in the section :ref:`domain-api`."
msgstr "このセクションでは、Sphinxのドメインが何を提供するのか、ということを説明していきます。ドキュメントAPIの説明は :ref:`domain-api` で説明します。"

#: ../../domains.rst:44
msgid "Basic Markup"
msgstr "マークアップの基礎"

#: ../../domains.rst:46
msgid ""
"Most domains provide a number of :dfn:`object description directives`, used "
"to describe specific objects provided by modules.  Each directive requires "
"one or more signatures to provide basic information about what is being "
"described, and the content should be the description.  The basic version "
"makes entries in the general index; if no index entry is desired, you can "
"give the directive option flag ``:noindex:``.  An example using a Python "
"domain directive::"
msgstr "ほとんどのドメインは、いくつかの :dfn:`object description directives` を提供しています。これを使って、モジュールが提供する特定のオブジェクトについて説明をしていきます。それぞれのディレクティブでは、何について説明しているか、説明すべき内容などの基本情報のためのフォーマットや統一のルールを定めています。基本的なスタイルのディレクティブは、全体の索引に、説明対象へのリンクを追加しますが、もし索引に追加したくなければ、ディレクティブのオプションフラグに ``:noindex:`` を追加します。例えば、Pythonのドメインのディレクティブの場合には、次のようになります。例::"

#: ../../domains.rst:58
msgid ""
"This describes the two Python functions ``spam`` and ``ham``.  (Note that "
"when signatures become too long, you can break them if you add a backslash "
"to lines that are continued in the next line.  Example::"
msgstr "ここでは、 ``spam`` と ``ham`` という2つのPython関数を説明しています。もしシグニチャが長すぎる場合には、バックスラッシュを使って引数リストの中で改行できます::"

#: ../../domains.rst:66
msgid "(This example also shows how to use the ``:noindex:`` flag.)"
msgstr "(このサンプルは、 ``:noindex:`` フラグの使い方でもあります)。"

#: ../../domains.rst:68
msgid ""
"The domains also provide roles that link back to these object descriptions."
"  For example, to link to one of the functions described in the example "
"above, you could say ::"
msgstr "ドメインは、オブジェクトへのリンクを張るためのロールも提供します。例えば先ほどのサンプルの関数説明にリンクを張るためには、次のように書きます::"

#: ../../domains.rst:74
msgid ""
"As you can see, both directive and role names contain the domain name and "
"the directive name."
msgstr "このように、ディレクティブとロール名の両方とも、ドメイン名とディレクティブ名の２つから構成されています。"

#: ../../domains.rst:78
msgid "Default Domain"
msgstr "デフォルトドメイン"

#: ../../domains.rst:79
msgid ""
"To avoid having to writing the domain name all the time when you e.g. only "
"describe Python objects, a default domain can be selected with either the "
"config value :confval:`primary_domain` or this directive:"
msgstr "もし、Pythonしか登場しないプロジェクトで、Pythonオブジェクトの説明しか書かない場合に、ドメイン名を毎回書かなくても良いようにする機能が提供されています。 :confval:`primary_domain` 設定値と、専用のディレクティブの2つの方法で、デフォルトのドメインを指定できるようになっています。"

#: ../../domains.rst:85
msgid ""
"Select a new default domain.  While the :confval:`primary_domain` selects a "
"global default, this only has an effect within the same file."
msgstr "新しいデフォルトのドメインを設定します。 :confval:`primary_domain` はプロジェクト全体のデフォルトを決定しますが、このディレクティブは同じファイル内にのみ影響を与えます。"

#: ../../domains.rst:88
msgid ""
"If no other default is selected, the Python domain (named ``py``) is the "
"default one, mostly for compatibility with documentation written for older "
"versions of Sphinx."
msgstr "もしもデフォルトが設定されないと、Pythonドメイン(``py``)がデフォルトになります。これは、過去のバージョンのSphinxで書かれたドキュメントと互換性があります。"

#: ../../domains.rst:92
msgid ""
"Directives and roles that belong to the default domain can be mentioned "
"without giving the domain name, i.e. ::"
msgstr "デフォルトドメインに属するディレクティブとロールを書く場合には、ドメイン名を入れる必要はありません::"

#: ../../domains.rst:103
msgid "Cross-referencing syntax"
msgstr "クロスリファレンス文法"

#: ../../domains.rst:105
msgid ""
"For cross-reference roles provided by domains, the same facilities exist as "
"for general cross-references.  See :ref:`xref-syntax`."
msgstr "汎用的なクロスリファレンスのために使用されるのと同じような機能を持つ、クロスリファレンスのためのロールが、ドメインによって提供されます。詳しくは :ref:`xref-syntax` を参照してください。"

#: ../../domains.rst:108
msgid "In short:"
msgstr "簡単に説明すると:"

#: ../../domains.rst:110
msgid ""
"You may supply an explicit title and reference target: ``:role:`title "
"<target>``` will refer to *target*, but the link text will be *title*."
msgstr "明示的なリンク名と、リンクターゲットを指定できます。 ``:rst:role:`タイトル <ターゲット>``` と書くと、 **ターゲット** を参照しますが、リンクテキストは **タイトル** になります。"

#: ../../domains.rst:113
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be "
"created."
msgstr "用語の先頭の文字に ``!`` を指定すると、参照もハイパーリンクも作成されなくなります。"

#: ../../domains.rst:115
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target.  For example, ``:py:meth:`~Queue.Queue.get``` will "
"refer to ``Queue.Queue.get`` but only display ``get`` as the link text."
msgstr "用語の先頭の文字に ``~`` を設定すると、リンクテキストは最後の項目だけが表示されるようになります。例えば、 ``:py:meth:`~Queue.Queue.get``` というマークアップがあったとすると、 ``Queue.Queue.get`` に対して参照が作成されますが、リンクテキストとしては ``get`` が表示されます。"

#: ../../domains.rst:121
msgid "The Python Domain"
msgstr "Pythonドメイン"

#: ../../domains.rst:123
msgid ""
"The Python domain (name **py**) provides the following directives for module"
" declarations:"
msgstr "Pythonドメイン(**py**)では、モジュールの説明のために、次のようなディレクティブを提供しています:"

#: ../../domains.rst:128
msgid ""
"This directive marks the beginning of the description of a module (or "
"package submodule, in which case the name should be fully qualified, "
"including the package name).  It does not create content (like e.g. "
":rst:dir:`py:class` does)."
msgstr "このディレクティブはモジュールの説明の開始時に使用します。パッケージやサブモジュールにも使用できますが、この場合はパッケージ名を含む、完全な名前を指定してください。この ディレクティブは :rst:dir:`py:class` ディレクティブのようなコンテンツを作成することはできません。"

#: ../../domains.rst:133
msgid "This directive will also cause an entry in the global module index."
msgstr "このディレクティブを使用すると、グローバルなモジュール索引に項目が追加されます。"

#: ../../domains.rst:135
msgid ""
"The ``platform`` option, if present, is a comma-separated list of the "
"platforms on which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\", and "
"\"Unix\".  It is important to use a key which has already been used when "
"applicable."
msgstr "``platform`` オプションが存在していれば、そのモジュールが利用可能なモジュールをカンマ区切りで指定します。もしすべてのプラットフォームで利用可能であれば、このオプションは使用しないようにしましょう。プラットフォーム名としては、短い識別子、例えば、\"IRIX\", \"Mac\", \"Windows\", \"Unix\"などから利用してください。もし適用時点ですでに使用されているキーがあれば、それを使用してください。"

#: ../../domains.rst:141
msgid ""
"The ``synopsis`` option should consist of one sentence describing the "
"module's purpose -- it is currently only used in the Global Module Index."
msgstr "``synopsis`` オプションには、モジュールの目的を説明する文章を書くことができます。現在のバージョンでは、これはグローバルモジュールインデックスの中でのみ使用されます。"

#: ../../domains.rst:144
msgid ""
"The ``deprecated`` option can be given (with no value) to mark a module as "
"deprecated; it will be designated as such in various locations then."
msgstr "``deprecated`` オプションを使用すると、このモジュールが古くて、使用するのを推奨しない、ということを示すことができます。オプションは取りません。このディレクティブは様々な場所で使用されるでしょう。"

#: ../../domains.rst:150
msgid ""
"This directive tells Sphinx that the classes, functions etc. documented from"
" here are in the given module (like :rst:dir:`py:module`), but it will not "
"create index entries, an entry in the Global Module Index, or a link target "
"for :rst:role:`py:mod`.  This is helpful in situations where documentation "
"for things in a module is spread over multiple files or sections -- one "
"location has the :rst:dir:`py:module` directive, the others only "
":rst:dir:`py:currentmodule`."
msgstr "このディレクティブはSphinxに対して、この行以降のクラスや関数などが、指定された与えられたモジュール (:rst:dir:`py:module` のように)の中にある、ということを通知します。これを使用しても、索引のエントリーは作成されません。 :rst:role:`mod` へのリンクターゲットも作成されません。このディレクティブは、モジュールに含まれる項目へのドキュメントが様々なファイルやセクションに分割されている場合に便利です。この場合には一カ所だけ :rst:dir:`py:module` ディレクティブを使用して、他の箇所で :rst:dir:`py:currentmodule` を使用するようにします。"

#: ../../domains.rst:159
msgid "The following directives are provided for module and class contents:"
msgstr "モジュールとクラスの中の構成要素を記述するために、次のようなディレクティブが提供されています:"

#: ../../domains.rst:163
msgid ""
"Describes a module-level function.  The signature should include the "
"parameters as given in the Python function definition, see "
":ref:`signatures`. For example::"
msgstr "モジュール レベルの関数について説明します。署名はPython の関数定義で指定されたパラメーターを含む必要があります。 :ref:`signatures` を参照ください。"

#: ../../domains.rst:169
msgid "For methods you should use :rst:dir:`py:method`."
msgstr "メソッドには :rst:dir:`py:method` を使用します。"

#: ../../domains.rst:171
msgid ""
"The description normally includes information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions."
msgstr "説明には一般的に、パラメータに必要な関する情報と、それらがどのように使用されるのか(変更可能なオブジェクトが渡されたときに、変更されるのかどうか)、副作用、投げられる可能性のある例外の情報を含めます。"

#: ../../domains.rst:175
msgid ""
"This information can (in any ``py`` directive) optionally be given in a "
"structured form, see :ref:`info-field-lists`."
msgstr "この情報は :ref:`info-field-list` にあるデータ構造で表現できます(他のpyドメインのディレクティブでも同様です)。"

#: ../../domains.rst:180
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\"  Class and object attributes are not documented "
"using this environment."
msgstr "モジュール内のグローバルなデータの説明をします。変数も値も\"定義された定数\"として取り込むことができます。クラスとオブジェクトの属性はこの環境を使用してドキュメントを書くことはできません。"

#: ../../domains.rst:186
msgid ""
"Describes an exception class.  The signature can, but need not include "
"parentheses with constructor arguments."
msgstr "例外クラスの説明をします。シグニチャには、コンストラクタの引数を括弧付きで含めることもできますが、しなくてもかまいません。"

#: ../../domains.rst:192
msgid ""
"Describes a class.  The signature can optionally include parentheses with "
"parameters which will be shown as the constructor arguments.  See also "
":ref:`signatures`."
msgstr "クラスについて説明します。シグニチャには、丸括弧とともにコンストラクタ引数として提示されるパラメータをオプションで含めることができます。 :ref:`signatures` も参照してください。"

#: ../../domains.rst:196
msgid ""
"Methods and attributes belonging to the class should be placed in this "
"directive's body.  If they are placed outside, the supplied name should "
"contain the class name so that cross-references still work.  Example::"
msgstr "このクラスに属する属性とメソッドのディレクティブはこのディレクティブの本体の中に記述します。このクラスの外に書いた場合は、提供された名前にクラス名が含まれていれば、クロスリファレンスは動作します。サンプル::"

#: ../../domains.rst:210
msgid "The first way is the preferred one."
msgstr "最初の書き方が推奨です。"

#: ../../domains.rst:214
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly."
msgstr "オブジェクトの属性のデータの説明をします。この説明には期待されるデータの型、値を直接変更できるかどうか、という情報を含めます。"

#: ../../domains.rst:220
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  See also :ref:`signatures` and :ref:`info-"
"field-lists`."
msgstr "オブジェクトのメソッドの説明をします。パラメータからは ``self`` パラメータははずします。この説明には ``function`` と同じ情報を記述するようにします。 :ref:`signatures` と :ref:`info-field-lists` も参照してください。"

#: ../../domains.rst:227
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a static method."
msgstr ":rst:dir:`py:method` とほぼ一緒ですが、メソッドがスタティックメソッドであるということを表します。"

#: ../../domains.rst:233
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a class method."
msgstr ":rst:dir:`py:method` とほぼ一緒ですが、メソッドがクラスメソッドであるということを表します。"

#: ../../domains.rst:240
msgid ""
"Describes a decorator function.  The signature should represent the usage as"
" a decorator.  For example, given the functions"
msgstr "デコレーターを説明します。このシグニチャにはデコレーターの使い方を記述します。例えばこの関数は"

#: ../../domains.rst:255
msgid "the descriptions should look like this::"
msgstr "次のように説明を書くことが出来ます"

#: ../../domains.rst:265
msgid "(as opposed to ``.. py:decorator:: removename(func)``.)"
msgstr "(``.. py:decorator:: removename(func)`` とは対象的です)"

#: ../../domains.rst:267
msgid ""
"There is no ``py:deco`` role to link to a decorator that is marked up with "
"this directive; rather, use the :rst:role:`py:func` role."
msgstr "これらに対応する、 ``py:deco`` といったロールはありません。代わりに、 :rst:role:`py:func` ロールを使用してください。"

#: ../../domains.rst:273
msgid "Same as :rst:dir:`py:decorator`, but for decorators that are methods."
msgstr ":rst:dir:`py:decorator` とほぼ同じですが、対象がメソッドになります。"

#: ../../domains.rst:275
msgid "Refer to a decorator method using the :rst:role:`py:meth` role."
msgstr "このデコレータを指定したい場合には、 :rst:role:`py:meth` ロールを使います。"

#: ../../domains.rst:281
msgid "Python Signatures"
msgstr "Pythonシグニチャ"

#: ../../domains.rst:283
msgid ""
"Signatures of functions, methods and class constructors can be given like "
"they would be written in Python."
msgstr "Pythonで書くのと同じように、関数、メソッド、クラスコンストラクタのシグニチャを与えることが出来ます。"

#: ../../domains.rst:286
msgid ""
"Default values for optional arguments can be given (but if they contain "
"commas, they will confuse the signature parser).  Python 3-style argument "
"annotations can also be given as well as return type annotations::"
msgstr "オプション引数のデフォルト値を与えることもできます。ただし、値にカンマが含まれると、シグニチャのパーサはうまく動作しません。Pythonの３つのスタイルの引数のアノテーションと同様に、返り値の型も記述できます::"

#: ../../domains.rst:292
msgid ""
"For functions with optional parameters that don't have default values "
"(typically functions implemented in C extension modules without keyword "
"argument support), you can use brackets to specify the optional parts:"
msgstr "デフォルト値を持たない省略可能なパラメータを持つ関数(よくある例としてはキーワード引数をサポートしていないC拡張モジュールで実装された関数があります)のため、省略可能な部分を角かっこで指定することも出来ます。"

#: ../../domains.rst:298
msgid "It is customary to put the opening bracket before the comma."
msgstr "通常、カンマの前に開き括弧を付けます。"

#: ../../domains.rst:304
msgid "Info field lists"
msgstr "詳細情報フィールドのリスト"

#: ../../domains.rst:308
msgid ""
"Inside Python object description directives, reST field lists with these "
"fields are recognized and formatted nicely:"
msgstr "Pythonのオブジェクト説明のためのディレクティブの内側には、適切に情報が明示されて、決まったルールに従ったreSTフィールドを配置できます:"

#: ../../domains.rst:311
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: "
"Description of a parameter."
msgstr "``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: 引数の説明です。"

#: ../../domains.rst:313
msgid "``type``: Type of a parameter.  Creates a link if possible."
msgstr "``type``: 引数の型です。可能ならリンクを生成します。"

#: ../../domains.rst:314
msgid ""
"``raises``, ``raise``, ``except``, ``exception``: That (and when) a specific"
" exception is raised."
msgstr "``raises``, ``raise``, ``except``, ``exception``: この中から投げられる例外(いつ投げられるか？)を定義します"

#: ../../domains.rst:316
msgid "``var``, ``ivar``, ``cvar``: Description of a variable."
msgstr "``var``, ``ivar``, ``cvar``: 変数の説明をします"

#: ../../domains.rst:317
msgid "``vartype``: Type of a variable.  Creates a link if possible."
msgstr "``vartype``: 変数の型です。可能ならリンクを生成します。"

#: ../../domains.rst:318
msgid "``returns``, ``return``: Description of the return value."
msgstr "``returns``, ``return``: 返り値の値について説明をします"

#: ../../domains.rst:319
msgid "``rtype``: Return type.  Creates a link if possible."
msgstr "``rtype``: 返り値の型です。可能ならリンクを生成します。"

#: ../../domains.rst:321
msgid ""
"The field names must consist of one of these keywords and an argument "
"(except for ``returns`` and ``rtype``, which do not need an argument).  This"
" is best explained by an example::"
msgstr "フィールドは、 ``return``, ``rtype`` 以外の場合は、上記のキーワードのうち、どれかと、引数を一つが引数として設定されています。 ``return``, ``rtype`` だけは引数を取りません。サンプルを見ていただくのが一番でしょう::"

#: ../../domains.rst:339
msgid "This will render like this:"
msgstr "これは次のようにレンダリングされます:"

#: ../../domains.rst:344
msgid "Send a message to a recipient"
msgstr "Send a message to a recipient"

#: ../../domains.rst:346
msgid "The person sending the message"
msgstr "The person sending the message"

#: ../../domains.rst:347
msgid "The recipient of the message"
msgstr "The recipient of the message"

#: ../../domains.rst:348
msgid "The body of the message"
msgstr "The body of the message"

#: ../../domains.rst:349
msgid "The priority of the message, can be a number 1-5"
msgstr "The priority of the message, can be a number 1-5"

#: ../../domains.rst:351
msgid "the message id"
msgstr "the message id"

#: ../../domains.rst:353
msgid "if the message_body exceeds 160 characters"
msgstr "if the message_body exceeds 160 characters"

#: ../../domains.rst:354
msgid "if the message_body is not a basestring"
msgstr "if the message_body is not a basestring"

#: ../../domains.rst:356
msgid ""
"It is also possible to combine parameter type and description, if the type "
"is a single word, like this::"
msgstr "型情報が一語で表せる場合には、属性の型と説明をひとつにまとめることもできます::"

#: ../../domains.rst:365
msgid "Cross-referencing Python objects"
msgstr "Pythonオブジェクトのクロススリファンレス"

#: ../../domains.rst:367
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked"
" if a matching identifier is found:"
msgstr "以下のロールを使用すると、モジュール内のオブジェクトを参照できます。一致する識別子が見つかれば、ハイパーリンクが作成されます:"

#: ../../domains.rst:372
msgid ""
"Reference a module; a dotted name may be used.  This should also be used for"
" package names."
msgstr "モジュールへの参照です。ドットで区切られた名前も使用できます。これはパッケージ名としても利用可能です。"

#: ../../domains.rst:377
msgid ""
"Reference a Python function; dotted names may be used.  The role text needs "
"not include trailing parentheses to enhance readability; they will be added "
"automatically by Sphinx if the :confval:`add_function_parentheses` config "
"value is ``True`` (the default)."
msgstr "Pythonの関数への参照です。ドットで区切られた名前も使用できます。ロールのテキストは読みやすさのために括弧を後ろに含める必要はありません。 :confval:`add_function_parentheses` 設定値を ``True``(デフォルト)にしておくと、Sphinxが自動で括弧を追加します。"

#: ../../domains.rst:384
msgid "Reference a module-level variable."
msgstr "モジュール変数を参照します。"

#: ../../domains.rst:388
msgid ""
"Reference a \"defined\" constant.  This may be a Python variable that is not"
" intended to be changed."
msgstr "「定義済み」定数です。変更して欲しくないPythonの変数にも使えます。"

#: ../../domains.rst:393
msgid "Reference a class; a dotted name may be used."
msgstr "クラス名です。ドットで区切られた名前も使用できます。"

#: ../../domains.rst:397
msgid ""
"Reference a method of an object.  The role text can include the type name "
"and the method name; if it occurs within the description of a type, the type"
" name can be omitted.  A dotted name may be used."
msgstr "オブジェクトのメソッドへの参照です。ロールのテキストには型名とメソッド名を含めなければなりません。ただし、型の記述中に書く場合には省略もできます。ドットで区切られた名前も使用できます。"

#: ../../domains.rst:403
msgid "Reference a data attribute of an object."
msgstr "オブジェクトの属性への参照です。"

#: ../../domains.rst:407
msgid "Reference an exception.  A dotted name may be used."
msgstr "例外への参照です。ドットで区切られた名前も使用できます。"

#: ../../domains.rst:411
msgid ""
"Reference an object of unspecified type.  Useful e.g. as the "
":confval:`default_role`."
msgstr "型が指定されていないオブジェクトの名前です。 :confval:`default_role` 一緒に使用すると便利です。"

#: ../../domains.rst:416
msgid ""
"The name enclosed in this markup can include a module name and/or a class "
"name. For example, ``:py:func:`filter``` could refer to a function named "
"``filter`` in the current module, or the built-in function of that name.  In"
" contrast, ``:py:func:`foo.filter``` clearly refers to the ``filter`` "
"function in the ``foo`` module."
msgstr "このマークアップの中の名前には、モジュール名, クラス名なども含めることができます。例えば、 ``:py:func:`filter``` は現在のモジュールに定義されている ``filter`` という名前の関数か、その名前を持つ組み込み関数をあらわします。 ``:py:func:`foo.filter``` と明示的に書くと、 ``foo`` モジュールの中の ``filter`` 関数を表します。"

#: ../../domains.rst:422
msgid ""
"Normally, names in these roles are searched first without any further "
"qualification, then with the current module name prepended, then with the "
"current module and class name (if any) prepended.  If you prefix the name "
"with a dot, this order is reversed.  For example, in the documentation of "
"Python's :mod:`codecs` module, ``:py:func:`open``` always refers to the "
"built-in function, while ``:py:func:`.open``` refers to :func:`codecs.open`."
msgstr "通常、これらのロールで使用される名前は、最初は修飾子なしで検索されます。次に現在のモジュール名を前に付けて検索されます。その次に現在のモジュール名とクラス名(あれば)を付けて検索されます。もし、ドットが先頭についた名前が指定された場合には、この探索順は逆になります。例えば、 :mod:`codecs` というPythonモジュールの定義の中で ``:py:func:`open``` が定義されると、常に組み込み関数を参照しますが、 ``:py:func:`.open``` と書かれると、 :func:`codecs.open` を参照するようになります。"

#: ../../domains.rst:429
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of"
" the currently documented class."
msgstr "属性名が、現在のクラスのものかどうかを決定するのにも、同様の名前検索の仕組みが使用されます。"

#: ../../domains.rst:432
msgid ""
"Also, if the name is prefixed with a dot, and no exact match is found, the "
"target is taken as a suffix and all object names with that suffix are "
"searched.  For example, ``:py:meth:`.TarFile.close``` references the "
"``tarfile.TarFile.close()`` function, even if the current module is not "
"``tarfile``.  Since this can get ambiguous, if there is more than one "
"possible match, you will get a warning from Sphinx."
msgstr "また、名前の前にドットがついていて、正確に一致するものがないと、ドットを外した名前を持つオブジェクトと、その名前を末尾に含むすべてのオブジェクトが検索されます。例えば、 ``:py:meth:`.TarFile.close``` という文字列は、現在のモジュールが ``tarfile`` でなかったとしても、 ``tarfile.TarFile.close()`` を見つけ出して参照します。もしも該当するオブジェクトが複数ある場合には、どれを参照すればいいのか一意に定まらないため、Sphinxは警告を出します。"

#: ../../domains.rst:439
msgid ""
"Note that you can combine the ``~`` and ``.`` prefixes: "
"``:py:meth:`~.TarFile.close``` will reference the "
"``tarfile.TarFile.close()`` method, but the visible link caption will only "
"be ``close()``."
msgstr "``~`` と ``.`` をオブジェクトの識別子の前に組み合わせることができます。 ``:py:meth:`~.TarFile.close``` と指定されると、 ``tarfile.TarFile.close()`` が参照されますが、実際に文章中に表示されるのは、 ``close()`` となります。"

#: ../../domains.rst:447
msgid "The C Domain"
msgstr "C言語ドメイン"

#: ../../domains.rst:449
msgid "The C domain (name **c**) is suited for documentation of C API."
msgstr "C言語ドメイン(**c**)はC言語のAPIのドキュメントを書くのに適しています。"

#: ../../domains.rst:453
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr "Cの関数の説明に使用します。シグニチャはC言語内で書かれる様に記述します。例えば以下のように書きます::"

#: ../../domains.rst:457
msgid ""
"This is also used to describe function-like preprocessor macros.  The names "
"of the arguments should be given so they may be used in the description."
msgstr "これは、関数のようなプリプロセッサマクロにも使用できます。説明の中で使用されることもあるため、引数名も書く必要があります。"

#: ../../domains.rst:460
msgid ""
"Note that you don't have to backslash-escape asterisks in the signature, as "
"it is not parsed by the reST inliner."
msgstr "シグネチャ内のアスタリスクはバックスラッシュでエスケープする必要はありません。この中はreSTの行内のテキスト処理のパーサは実行されず、専用のパーサで処理されます。"

#: ../../domains.rst:465
msgid "Describes a C struct member. Example signature::"
msgstr "C言語の構造体メンバーの説明をします。以下のように記述します::"

#: ../../domains.rst:469
msgid ""
"The text of the description should include the range of values allowed, how "
"the value should be interpreted, and whether the value can be changed. "
"References to structure members in text should use the ``member`` role."
msgstr "説明のテキストには受け入れ可能な値の範囲、値がどのように解釈されるべきか、値が変更可能かどうかという情報を入れるべきです。構造体のメンバーへの参照をテキストの中で書きたい場合には、 ``member`` ロールを使用すべきです。"

#: ../../domains.rst:475
msgid ""
"Describes a \"simple\" C macro.  Simple macros are macros which are used for"
" code expansion, but which do not take arguments so cannot be described as "
"functions.  This is a simple C-language ``#define``.  Examples of its use in"
" the Python documentation include :c:macro:`PyObject_HEAD` and "
":c:macro:`Py_BEGIN_ALLOW_THREADS`."
msgstr "「シンプルな」C言語のマクロの説明をします。シンプルなマクロというのは、単純なコード展開だけをするもので、引数を取らず、そのため関数として説明できないものです。これはC言語の単純な ``#define`` です。このディレクティブのサンプルを見るには、Pythonドキュメントの :c:macro:`PyObject_HEAD` と :c:macro:`Py_BEGIN_ALLOW_THREADS` を参照してください。"

#: ../../domains.rst:483
msgid ""
"Describes a C type (whether defined by a typedef or struct). The signature "
"should just be the type name."
msgstr "C言語の型名を説明します。型というのは、typedefかstructで定義されるものです。シグニチャには型名を指定します。"

#: ../../domains.rst:488
msgid ""
"Describes a global C variable.  The signature should include the type, such "
"as::"
msgstr "グローバルなC言語の変数について説明します。シグニチャは型を含む必要があります。次のように記述します::"

#: ../../domains.rst:497
msgid "Cross-referencing C constructs"
msgstr "C言語の要素へのクロスリファレンス"

#: ../../domains.rst:499
msgid ""
"The following roles create cross-references to C-language constructs if they"
" are defined in the documentation:"
msgstr "以下のロールは、もしドキュメントの中に定義の説明があれば、C言語の要素へのクロスリファレンスを作成します:"

#: ../../domains.rst:504
msgid "Reference a C-language variable."
msgstr "C言語の変数への参照です。"

#: ../../domains.rst:508
msgid "Reference a C-language function. Should include trailing parentheses."
msgstr "C言語の関数への参照です。カッコを省略することはできません。"

#: ../../domains.rst:512
msgid "Reference a \"simple\" C macro, as defined above."
msgstr "前の説明で述べた、シンプルなC言語のマクロへの参照です。"

#: ../../domains.rst:516
msgid "Reference a C-language type."
msgstr "C言語の型への参照です。"

#: ../../domains.rst:520
msgid "The C++ Domain"
msgstr "C++ドメイン"

#: ../../domains.rst:522
msgid "The C++ domain (name **cpp**) supports documenting C++ projects."
msgstr "C++ドメインは(**cpp**)は、C++プロジェクトのドキュメント作成をサポートします。"

#: ../../domains.rst:524
msgid ""
"The following directives are available. All declarations can start with a "
"visibility statement (``public``, ``private`` or ``protected``)."
msgstr "以下のディレクティブを使用できます。全ての定義にはアクセス制御識別子(``public``, ``private``, ``protected``)を最初に付けられます。"

#: ../../domains.rst:529
msgid ""
"Describe a class/struct, possibly with specification of inheritance, e.g.,::"
msgstr "クラスや構造について説明します。継承についての情報も書けます。"

#: ../../domains.rst:535
msgid "Describe a function or member function, e.g.,::"
msgstr "関数とメンバーの説明です。例えば以下のように書きます::"

#: ../../domains.rst:564
msgid "Describe a variable or member variable, e.g.,::"
msgstr ""

#: ../../domains.rst:575
msgid ""
"Describe a type as in a typedef declaration, or the name of a type with "
"unspecified type, e.g.,::"
msgstr "typedef定義にあるような型と型名（訳注: name of a type with unspecified type）の説明です。例えば以下のように書きます::"

#: ../../domains.rst:589
msgid ""
"Describe a (scoped) enum, possibly with the underlying type specified. Any "
"enumerators declared inside an unscoped enum will be declared both in the "
"enum scope and in the parent scope. Examples::"
msgstr "列挙型について説明します。型指定やスコープ指定もできます。どの列挙もスコープ無し列挙型の中に書くこともできます。例::"

#: ../../domains.rst:613
msgid "Describe an enumerator, optionally with its value defined."
msgstr "列挙子について説明します。値指定もできます。"

#: ../../domains.rst:617
msgid ""
"Select the current namespace for the subsequent objects. Note that the "
"namespace does not need to correspond to C++ namespaces, but can end in "
"names of classes, e.g.,::"
msgstr "これ以降のオブジェクトの名前空間を選択します。名前空間はC++の名前空間に合わせる必要は無く、クラス名まで含めてもかまいません。例::"

#: ../../domains.rst:622
msgid ""
"All subsequent objects will be defined as if their name were declared with "
"the namespace prepended. The subsequent cross-references will be searched "
"for by both their specified name and with the namespace prepended."
msgstr ""

#: ../../domains.rst:626
msgid ""
"Using ``NULL``, ``0``, or ``nullptr`` as the namespace will reset it to the "
"global namespace."
msgstr ""

#: ../../domains.rst:631
msgid "These roles link to the given object types:"
msgstr "このドメインは次のようなオブジェクトの種類へのロールを提供しています:"

#: ../../domains.rst:642
msgid ""
"Reference a C++ object by name. The name must be properly qualified relative"
" to the position of the link."
msgstr ""

#: ../../domains.rst:647
msgid ""
"Sphinx's syntax to give references a custom title can interfere with linking"
" to template classes, if nothing follows the closing angle bracket, i.e. if "
"the link looks like this: ``:cpp:class:`MyClass<T>```. This is interpreted "
"as a link to ``T`` with a title of ``MyClass``. In this case, please escape "
"the opening angle bracket with a backslash, like this: "
"``:cpp:class:`MyClass\\<T>```."
msgstr "``>`` のあとになにも書かない場合、Sphinxの文法はテンプレートクラスへのリンクをもてる独自のタイトルへの参照を書けます。例えばもしリンクがこのような場合: ``:cpp:class:`MyClass<T>``` 、 ``MyClass`` というタイトルの ``T`` へのリンクと解釈されます。なお、この場合、<をバックスラッシュでエスケープしてください。例: ``:cpp:class:`MyClass\\<T>```"

#: ../../domains.rst:654
msgid "Note on References"
msgstr "リンクを貼る際の注意点"

#: ../../domains.rst:656
msgid ""
"It is currently impossible to link to a specific version of an overloaded "
"method.  Currently the C++ domain is the first domain that has basic support"
" for overloaded methods and until there is more data for comparison we don't"
" want to select a bad syntax to reference a specific overload.  Currently "
"Sphinx will link to the first overloaded version of the method / function."
msgstr "現在の実装では、オーバーロードされた特定のメソッドに対してリンクを張ることはできません。C++ドメインは、オーバーロードされたメソッドを持つ言語をサポートする最初のドメインです。きちんとそれぞれのメソッドを比較できるようなデータ構造を持つまでは、特定のメソッドを参照するために見難い構文を導入するのは避けたいと考えています。現在のSphinxでは、オーバーロードされた最初のメソッドや関数をリンクしに行きます。"

#: ../../domains.rst:663
msgid "Note on Template Delcarations"
msgstr ""

#: ../../domains.rst:665
msgid ""
"The C++ domain currently does not support template "
"classes/functions/aliases/variables (e.g., ``template<typename T> "
"MyClass``), only template instantiations (e.g., ``MyClass<T>``)."
msgstr ""

#: ../../domains.rst:671
msgid "The Standard Domain"
msgstr "標準ドメイン"

#: ../../domains.rst:673
msgid ""
"The so-called \"standard\" domain collects all markup that doesn't warrant a"
" domain of its own.  Its directives and roles are not prefixed with a domain"
" name."
msgstr "標準ドメインには、固有のドメインを作るまでもないすべてのマークアップが含まれます。これらのディレクティブやロールには、ドメイン名のプリフィックスは付きません。"

#: ../../domains.rst:677
msgid ""
"The standard domain is also where custom object descriptions, added using "
"the :func:`~sphinx.application.Sphinx.add_object_type` API, are placed."
msgstr "標準ドメインには、 :func:`~sphinx.application.Sphinx.add_object_type` APIを使って追加されたカスタムの説明ディレクティブ、ロールも含まれます。"

#: ../../domains.rst:680
msgid ""
"There is a set of directives allowing documenting command-line programs:"
msgstr "現在は、コマンドラインのプログラムを説明するためのディレクティブ群が提供されています:"

#: ../../domains.rst:684
msgid ""
"Describes a command line argument or switch.  Option argument names should "
"be enclosed in angle brackets.  Examples::"
msgstr "コマンド ・ ライン引数またはスイッチを説明します。オプションの引数名は括弧で囲む必要があります。例えば:"

#: ../../domains.rst:695
msgid ""
"The directive will create cross-reference targets for the given options, "
"referencable by :rst:role:`option` (in the example case, you'd use something"
" like ``:option:`dest_dir```, ``:option:`-m```, or ``:option:`--module```)."
msgstr "このディレクティブは与えられた複数のオプションを名前付きのターゲットとみなし、これらはクロスリファレンスから :rst:role:`option` にて参照されます(この例の場合は  ``:option:`dest_dir```, ``:option:`-m```, ``:option:`--module``` という形式です)。"

#: ../../domains.rst:701
msgid ""
"Describes an environment variable that the documented code or program uses "
"or defines.  Referencable by :rst:role:`envvar`."
msgstr "現在ドキュメントの対象ととなっているコードやプログラムが使用したり、定義する環境変数について説明します。 :rst:role:`envvar` というロールを使って参照できます。"

#: ../../domains.rst:706
msgid ""
"Like :rst:dir:`py:currentmodule`, this directive produces no output. "
"Instead, it serves to notify Sphinx that all following :rst:dir:`option` "
"directives document options for the program called *name*."
msgstr ":rst:dir:`py:currentmodule` と同様に、このディレクティブは何も出力しません。その代わりにこのディレクティブを定義すると、Sphinxはこの後に定義される :rst:dir:`option` ディレクティブが説明するオプションが、ここで指定された *名前* を持つプログラムに属するということを認識できるようになります。"

#: ../../domains.rst:710
msgid ""
"If you use :rst:dir:`program`, you have to qualify the references in your "
":rst:role:`option` roles by the program name, so if you have the following "
"situation ::"
msgstr ":rst:dir:`program` を使用する場合には、 :rst:role:`option` ロールとプログラム名を適合させる必要があります。以下のような状況について見てみます::"

#: ../../domains.rst:726
msgid ""
"then ``:option:`rm -r``` would refer to the first option, while "
"``:option:`svn -r``` would refer to the second one."
msgstr "この場合、 ``option`rm -r``` 最初のオプションを示し、 ``option:`svn -r``` は２番目のオプションを示します。"

#: ../../domains.rst:729
msgid ""
"The program name may contain spaces (in case you want to document "
"subcommands like ``svn add`` and ``svn commit`` separately)."
msgstr "プログラム名はスペースを含むこともできます。そのため、 ``svn add`` や、 ``svn commit`` などのサブコマンドを個別に取り扱いたい、というケースにも対応できます。"

#: ../../domains.rst:735
msgid ""
"There is also a very generic object description directive, which is not tied"
" to any domain:"
msgstr "どこのドメインにも属さないような、非常に汎用的なオブジェクトの説明用のディレクティブも存在します:"

#: ../../domains.rst:741
msgid ""
"This directive produces the same formatting as the specific ones provided by"
" domains, but does not create index entries or cross-referencing targets. "
"Example::"
msgstr "このディレクティブはドメインで提供されているディレクティブを使ったのと、同じ形式にフォーマットされたテキストを生成します。その代わり、インデックスのエントリーや、クロスリファレンスのターゲットは作成されません::"

#: ../../domains.rst:751
msgid "The JavaScript Domain"
msgstr "JavaScriptドメイン"

#: ../../domains.rst:753
msgid "The JavaScript domain (name **js**) provides the following directives:"
msgstr "JavaScriptドメイン(**js**)は次のようなディレクティブを提供します:"

#: ../../domains.rst:757
msgid ""
"Describes a JavaScript function or method.  If you want to describe "
"arguments as optional use square brackets as :ref:`documented <signatures>` "
"for Python signatures."
msgstr "JavaScriptの関数やメソッドの説明をします。オプショナルな引数を説明したい場合には、Pythonシグニチャのために :ref:`説明したように <signatures>` 角カッコを使用します。"

#: ../../domains.rst:761
msgid ""
"You can use fields to give more details about arguments and their expected "
"types, errors which may be thrown by the function, and the value being "
"returned::"
msgstr "引数や期待される型、関数から投げられるエラー、returnで返される値などのフィールド情報の詳細を書くこともできます::"

#: ../../domains.rst:775 ../../domains.rst:797
msgid "This is rendered as:"
msgstr "次のようにレンダリングされます:"

#: ../../domains.rst:779
msgid "An URI to the location of the resource."
msgstr "リソースの場所を示すURI。"

#: ../../domains.rst:780
msgid "Gets called with the object."
msgstr "このオブジェクトのコールバック"

#: ../../domains.rst:781
msgid ""
"Gets called in case the request fails. And a lot of other text so we need "
"multiple lines."
msgstr "リクエストが失敗した時のコールバック。また、他のたくさんの文字情報。従って、複数行が必要となります。"

#: ../../domains.rst:784
msgid "For whatever reason in that case."
msgstr "その場合のなにかの理由"

#: ../../domains.rst:785
msgid "Something."
msgstr "なにか"

#: ../../domains.rst:789
msgid ""
"Describes a constructor that creates an object.  This is basically like a "
"function but will show up with a `class` prefix::"
msgstr "オブジェクトを作るコンストラクタの説明をします。基本的には関数と似ていますが、 `class` という文字が表示されます::"

#: ../../domains.rst:801
msgid "The name of the animal"
msgstr "動物の名前"

#: ../../domains.rst:802
msgid "an optional age for the animal"
msgstr "動物の年齢。これはオプションです。"

#: ../../domains.rst:806
msgid "Describes a global variable or constant."
msgstr "グローバル変数や定数の説明です。"

#: ../../domains.rst:810
msgid "Describes the attribute *name* of *object*."
msgstr "**オブジェクト** の持つ **属性名** を説明します。"

#: ../../domains.rst:814 ../../domains.rst:867
msgid "These roles are provided to refer to the described objects:"
msgstr "このドメインでは、オブジェクトの説明を参照する、次のようなロールが提供されています:"

#: ../../domains.rst:823
msgid "The reStructuredText domain"
msgstr "reStructuredTextドメイン"

#: ../../domains.rst:825
msgid ""
"The reStructuredText domain (name **rst**) provides the following "
"directives:"
msgstr "reStructuredTextドメイン(**rst**)は、次のようなディレクティブを提供します:"

#: ../../domains.rst:829
msgid ""
"Describes a reST directive.  The *name* can be a single directive name or "
"actual directive syntax (`..` prefix and `::` suffix) with arguments that "
"will be rendered differently.  For example::"
msgstr "reSTディレクティブの説明をします。 *name* には単独のディレクティブ名か、引数付きの実際のディレクティブの文法(`..` を前に付けたり、後ろに `::` を付けたり)で記述をします。例::"

#: ../../domains.rst:841 ../../domains.rst:859
msgid "will be rendered as:"
msgstr "これは次のようにレンダリングされます"

#: ../../domains.rst:845 ../../domains.rst:863
msgid "Foo description."
msgstr "Fooの説明"

#: ../../domains.rst:849
msgid "Bar description."
msgstr "Barの説明"

#: ../../domains.rst:853
msgid "Describes a reST role.  For example::"
msgstr "reSTのロールの説明をします。 例::"

#: ../../domains.rst:874
msgid "More domains"
msgstr "追加のドメイン"

#: ../../domains.rst:876
msgid ""
"The sphinx-contrib_ repository contains more domains available as "
"extensions; currently Ada_, CoffeeScript_, Erlang_, HTTP_, Lasso_, MATLAB_, "
"PHP_, and Ruby_ domains. Also available are domains for `Common Lisp`_, "
"dqn_, Go_, Jinja_, Operation_, and Scala_."
msgstr "sphinx-contrib_ リポジトリには多くのドメイン拡張が含まれています。現在は Ada_, CoffeeScript_, Erlang_, HTTP_, Lasso_, MATLAB_, PHP_, Ruby_ ドメインがあります。また、`Common Lisp`_, dqn_, Go_, Jinja_, Operation_, Scala_ 用のドメインも利用可能です。"
