# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2016, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# 
# Translators:
# Takayuki Shimizukawa <shimizukawa@gmail.com>, 2014-2015
# Yuta Hono <yuta.hono@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: sphinx-doc-1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-16 05:36+0000\n"
"PO-Revision-Date: 2016-01-12 06:23+0000\n"
"Last-Translator: sphinx-users.jp <shimizukawa+sphinxjp@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/sphinx-doc/sphinx-doc-1_3/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../ext/autodoc.rst:4
msgid ":mod:`sphinx.ext.autodoc` -- Include documentation from docstrings"
msgstr ":mod:`sphinx.ext.autodoc` -- docstringからのドキュメントの取り込み"

#: ../../ext/autodoc.rst:12
msgid ""
"This extension can import the modules you are documenting, and pull in "
"documentation from docstrings in a semi-automatic way."
msgstr "この拡張機能は、docstringでドキュメントが書かれているモジュールをインポートして、そのdocstringから、半自動的にドキュメントを取り込みます。"

#: ../../ext/autodoc.rst:17
msgid ""
"For Sphinx (actually, the Python interpreter that executes Sphinx) to find "
"your module, it must be importable.  That means that the module or the "
"package must be in one of the directories on :data:`sys.path` -- adapt your "
":data:`sys.path` in the configuration file accordingly."
msgstr "Sphinx(実際にはSphinxを実行しているPythonインタプリタ)がモジュールを見つけられるためには、そのモジュールはインポート可能になっていなければなりません。これは、インポートしたいモジュールやパッケージが\\ :data:`sys.path`\\ で設定されているディレクトリのどれかに入っている必要があるということです。設定ファイル内で、適宜\\ :data:`sys.path`\\ を調整してください。"

#: ../../ext/autodoc.rst:24
msgid ""
":mod:`~sphinx.ext.autodoc` **imports** the modules to be documented.  If any"
" modules have side effects on import, these will be executed by ``autodoc`` "
"when ``sphinx-build`` is run."
msgstr ":mod:`~sphinx.ext.autodoc` はドキュメンテーションされるモジュールを **インポート** します.  もしインポートによる副作用があれば、 ``sphinx-build`` が実行されるとき ``autodoc`` により実行されます。"

#: ../../ext/autodoc.rst:28
msgid ""
"If you document scripts (as opposed to library modules), make sure their "
"main routine is protected by a ``if __name__ == '__main__'`` condition."
msgstr "もしあなたが  (ライブラリモジュールではなく)  スクリプトをドキュメント化したいのであれば、スクリプトのメインルーチンが ``if __name__ == '__main__'`` 条件により保護されていることを確認して下さい。"

#: ../../ext/autodoc.rst:31
msgid ""
"For this to work, the docstrings must of course be written in correct "
"reStructuredText.  You can then use all of the usual Sphinx markup in the "
"docstrings, and it will end up correctly in the documentation.  Together "
"with hand-written documentation, this technique eases the pain of having to "
"maintain two locations for documentation, while at the same time avoiding "
"auto-generated-looking pure API documentation."
msgstr "この機能がうまく働くためには、docstringは正しいreStructuredTextのフォーマットに従って記述されている必要があります。また、すべてのSphinxのマークアップをdocstringの中に書くことができ、最終的に正しくドキュメンテーションされます。手書きのドキュメントと一緒にモジュールのドキュメントを作成する場合には、純粋なAPIのドキュメントを同時に自動生成できるため、この機能を使うと両方を同時に管理しなければならないという痛みを和らげることができます。"

#: ../../ext/autodoc.rst:38
msgid ""
"If you prefer `NumPy`_ or `Google`_ style docstrings over reStructuredText, "
"you can also enable the :mod:`napoleon <sphinx.ext.napoleon>` extension. "
":mod:`napoleon <sphinx.ext.napoleon>` is a preprocessor that converts your "
"docstrings to correct reStructuredText before :mod:`autodoc` processes them."
msgstr ""

#: ../../ext/autodoc.rst:48
msgid ""
":mod:`autodoc` provides several directives that are versions of the usual "
":rst:dir:`py:module`, :rst:dir:`py:class` and so forth.  On parsing time, "
"they import the corresponding module and extract the docstring of the given "
"objects, inserting them into the page source under a suitable "
":rst:dir:`py:module`, :rst:dir:`py:class` etc.  directive."
msgstr ":mod:`autodoc` は通常の\\ :rst:dir:`py:module`, :rst:dir:`py:class`\\ などのディレクティブに似た別バージョンのディレクティブを提供します。ドキュメントのパース時に指定されたモジュールを読み込んで、docstringを抽出して、その内容を通常の\\ :rst:dir:`py:module`, :rst:dir:`py:class`\\ ディレクティブと一緒に差込みます。"

#: ../../ext/autodoc.rst:56
msgid ""
"Just as :rst:dir:`py:class` respects the current :rst:dir:`py:module`, "
":rst:dir:`autoclass` will also do so.  Likewise, :rst:dir:`automethod` will "
"respect the current :rst:dir:`py:class`."
msgstr ":rst:dir:`py:class`\\ を宣言したときに、既に定義されている\\ :rst:dir:`py:module`\\ の中に配置されるのと同様に、\\ :rst:dir:`autoclass`\\ も同じように振舞います。\\ :rst:dir:`automethod`\\  と\\ :rst:dir:`py:class`\\ についても同様です。"

#: ../../ext/autodoc.rst:65
msgid ""
"Document a module, class or exception.  All three directives will by default"
" only insert the docstring of the object itself::"
msgstr "モジュール、クラス、例外のドキュメントを作成します。これらのディレクティブは、デフォルトでは指定されたオブジェクトのdocstringだけを読み込みます::"

#: ../../ext/autodoc.rst:70
msgid "will produce source like this::"
msgstr "これを実行すると以下のようなreSTのソースコードが生成されます::"

#: ../../ext/autodoc.rst:76
msgid ""
"The \"auto\" directives can also contain content of their own, it will be "
"inserted into the resulting non-auto directive source after the docstring "
"(but before any automatic member documentation)."
msgstr "\"auto\"ディレクティブは、取り込むだけでなく、自分自身のコンテンツを書くことができます。自動取り込みされたドキュメントの後に挿入されます。"

#: ../../ext/autodoc.rst:80
msgid ""
"Therefore, you can also mix automatic and non-automatic member "
"documentation, like so::"
msgstr "そのため、以下のサンプルのように、自動のドキュメントと、手動で書いたメンバーのドキュメントを混ぜてかくこともできます::"

#: ../../ext/autodoc.rst:90
msgid "**Options and advanced usage**"
msgstr "**オプション/進んだ使い方**"

#: ../../ext/autodoc.rst:92
msgid ""
"If you want to automatically document members, there's a ``members`` "
"option::"
msgstr "もしも自動的にメンバーの関数やプロパティのドキュメントも取り込みたい場合には、\\ ``members``\\ オプションを使用します::"

#: ../../ext/autodoc.rst:98
msgid "will document all module members (recursively), and ::"
msgstr "このように書くと、すべてのモジュールのメンバーを再帰的にドキュメントにしていきます。そして::"

#: ../../ext/autodoc.rst:103
msgid ""
"will document all non-private member functions and properties (that is, "
"those whose name doesn't start with ``_``)."
msgstr "これをビルドすると、すべての非プライベートの関数とプロパティ(名前が\\ ``_``\\ 以外から始まる)のドキュメントが取り込まれます。"

#: ../../ext/autodoc.rst:106
msgid ""
"For modules, ``__all__`` will be respected when looking for members; the "
"order of the members will also be the order in ``__all__``."
msgstr "モジュールに関しては、もしあればメンバーを探すのに ``__all__`` が利用されます。出力されるメンバーの順序も、 ``__all__`` の順序になります。"

#: ../../ext/autodoc.rst:109
msgid ""
"You can also give an explicit list of members; only these will then be "
"documented::"
msgstr "また、ドキュメントを出力したいメンバーのリストを明示的に書くと、それらの指定されたメンバーのドキュメントが生成されます::"

#: ../../ext/autodoc.rst:115
msgid ""
"If you want to make the ``members`` option (or other flag options described "
"below) the default, see :confval:`autodoc_default_flags`."
msgstr "もしも、デフォルトで ``members`` オプション(や、これから説明する他のオプション)を有効にしたい場合には、 :confval:`autodoc_default_flags` を参照してください。"

#: ../../ext/autodoc.rst:118
msgid ""
"Members without docstrings will be left out, unless you give the ``undoc-"
"members`` flag option::"
msgstr "``undoc-members``\\ フラグオプションを指定しないと、docstringの付いていないメンバーは省略されます::"

#: ../../ext/autodoc.rst:125
msgid ""
"\"Private\" members (that is, those named like ``_private`` or "
"``__private``) will be included if the ``private-members`` flag option is "
"given."
msgstr "\"プライベート\"メンバー (``_private`` や ``__private`` といった名前を持つ)は、 ``private-members`` フラグをセットすると含まれるようになります。"

#: ../../ext/autodoc.rst:130
msgid ""
"Python \"special\" members (that is, those named like ``__special__``) will "
"be included if the ``special-members`` flag option is given::"
msgstr "Pythonの\"特殊メンバー\" (``__special__`` のような名前)は、 ``special-members`` フラグをセットすると、含まれるようになります::"

#: ../../ext/autodoc.rst:138
msgid "would document both \"private\" and \"special\" members of the class."
msgstr "このようにセットすると、クラスのプライベートメンバー、特殊メンバーの両方が出力されるようになります。"

#: ../../ext/autodoc.rst:142
msgid ""
"The option can now take arguments, i.e. the special members to document."
msgstr "オプションは引数を持てるようになりました。例えば、 ``__`` で始まるメンバーをドキュメントしたい場合などに指定します。"

#: ../../ext/autodoc.rst:145
msgid ""
"For classes and exceptions, members inherited from base classes will be left"
" out when documenting all members, unless you give the ``inherited-members``"
" flag option, in addition to ``members``::"
msgstr "クラスと例外で、\\ ``members``\\ と一緒に\\ ``inherited-members``\\ フラグオプションが指定されていない場合には、例えすべてのメンバーにドキュメントが書かれていたとしても、ベースクラスで定義されているメンバーは省略されます。を指定しないと、docstringの付いていないメンバーは省略されます::"

#: ../../ext/autodoc.rst:153
msgid ""
"This can be combined with ``undoc-members`` to document *all* available "
"members of the class or module."
msgstr "このフラグと\\ ``undoc-members``\\ を同時に適用すると、クラスとモジュールの持っている、\\ **すべての**\\ 利用可能なメンバーのドキュメントが作成されるようになります。"

#: ../../ext/autodoc.rst:156
msgid ""
"Note: this will lead to markup errors if the inherited members come from a "
"module whose docstrings are not reST formatted."
msgstr "注意: もしもdocstringがreST形式でないモジュールで定義されたメンバーがあると、マークアップエラーになるでしょう。"

#: ../../ext/autodoc.rst:161
msgid ""
"It's possible to override the signature for explicitly documented callable "
"objects (functions, methods, classes) with the regular syntax that will "
"override the signature gained from introspection::"
msgstr "通常は内省機能を使って情報を取得しますが、明示的にドキュメントを書くことで、通常の文法で定義された呼び出し可能なオブジェクト(関数、メソッド、クラス)の呼び出し規約(変数名など)を上書きできます::"

#: ../../ext/autodoc.rst:169
msgid ""
"This is useful if the signature from the method is hidden by a decorator."
msgstr "この機能はデコレータなどによって、メソッドの呼び出し規約が内省機能で取れない状態になっている場合に便利です。"

#: ../../ext/autodoc.rst:173
msgid ""
"The :rst:dir:`automodule`, :rst:dir:`autoclass` and :rst:dir:`autoexception`"
" directives also support a flag option called ``show-inheritance``.  When "
"given, a list of base classes will be inserted just below the class "
"signature (when used with :rst:dir:`automodule`, this will be inserted for "
"every class that is documented in the module)."
msgstr ":rst:dir:`automodule`\\ と、\\ :rst:dir:`autocalss`\\ 、\\ :rst:dir:`autoexception`\\ ディレクティブは\\ ``show-inheritance``\\ というオプションをサポートしています。これが設定されると、クラスのシグニチャの直前に、継承しているベースクラスのリストが表示されるようになります。\\ :rst:dir:`automodule`\\ に対して使用されると、モジュール内でドキュメントが記述されているすべてのクラスのベースクラスが表示されるようになります。"

#: ../../ext/autodoc.rst:181
msgid ""
"All autodoc directives support the ``noindex`` flag option that has the same"
" effect as for standard :rst:dir:`py:function` etc. directives: no index "
"entries are generated for the documented object (and all autodocumented "
"members)."
msgstr "autodocのすべてのディレクティブは\\ ``noindex``\\ というフラグオプションをサポートしています。これは標準の\\ :rst:dir:`py:function`\\ などと同様の効果があります。ドキュメントが生成されるオブジェクトと、それに含まれるメンバーに対する索引が生成されなくなります。"

#: ../../ext/autodoc.rst:188
msgid ""
":rst:dir:`automodule` also recognizes the ``synopsis``, ``platform`` and "
"``deprecated`` options that the standard :rst:dir:`py:module` directive "
"supports."
msgstr ":rst:dir:`automodule`\\ は標準の\\ :rst:dir:`py:module`\\ ディレクティブがサポートしている\\ ``synopsis``, ``platform``, ``deprecated``\\ オプションをサポートしています。"

#: ../../ext/autodoc.rst:194
msgid ""
":rst:dir:`automodule` and :rst:dir:`autoclass` also has an ``member-order`` "
"option that can be used to override the global value of "
":confval:`autodoc_member_order` for one directive."
msgstr ":rst:dir:`automodule`\\ と\\ :rst:dir:`autoclass`\\ は\\ ``member-order``\\ というオプションを持っています。これを設定すると、このディレクティブの中でのみグローバルな\\ :confval:`autodoc_member_order`\\ という設定をオーバーライドできます。"

#: ../../ext/autodoc.rst:200
msgid ""
"The directives supporting member documentation also have a ``exclude-"
"members`` option that can be used to exclude single member names from "
"documentation, if all members are to be documented."
msgstr "メンバーのドキュメント生成をサポートしているディレクティブは\\ ``exclude-members``\\ というオプションも持っています。これはすべてのドキュメントを生成する場合に、除外したいメンバーの名前をひとつだけ追加するのに使用します。"

#: ../../ext/autodoc.rst:206
msgid ""
"In an :rst:dir:`automodule` directive with the ``members`` option set, only "
"module members whose ``__module__`` attribute is equal to the module name as"
" given to ``automodule`` will be documented.  This is to prevent "
"documentation of imported classes or functions.  Set the ``imported-"
"members`` option if you want to prevent this behavior and document all "
"available members.  Note that attributes from imported modules will not be "
"documented, because attribute documentation is discovered by parsing the "
"source file of the current module."
msgstr "``members``\\ オプションが設定されている\\ :rst:dir:`automodule`\\ ディレクティブの中では、\\ ``__module__``\\ 属性が\\ ``automodule``\\ で与えられたモジュール名と等しいメンバーのみのドキュメントが生成されます。これはインポートされたクラスや関数のドキュメントまで生成しないための措置です。 ``imported-members`` オプションによって、この動作をさせないよう指定でき、全てのメンバーをドキュメント化します。インポートしたモジュールの属性はドキュメント化されないことに注意してください。これは、属性のドキュメント化は現在のモジュールのソースコードをパースして行われるためです。"

#: ../../ext/autodoc.rst:217
msgid ""
"Add a list of modules in the :confval:`autodoc_mock_imports` to prevent "
"import errors to halt the building process when some external dependencies "
"are not importable at build time."
msgstr ""

#: ../../ext/autodoc.rst:229
msgid ""
"These work exactly like :rst:dir:`autoclass` etc., but do not offer the "
"options used for automatic member documentation."
msgstr "これらのディレクティブは\\ :rst:dir:`autoclass`\\ などと同じように動作しますが、メンバー内のドキュメント生成のオプションはありません。"

#: ../../ext/autodoc.rst:232
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` support the ``annotation`` "
"option. Without this option, the representation of the object will be shown "
"in the documentation. When the option is given without arguments, only the "
"name of the object will be printed::"
msgstr ""

#: ../../ext/autodoc.rst:242
msgid "You can tell sphinx what should be printed after the name::"
msgstr "名前の後に何が表示されるべきかsphinxに与えることができます::"

#: ../../ext/autodoc.rst:247
msgid ""
"For module data members and class attributes, documentation can either be "
"put into a comment with special formatting (using a ``#:`` to start the "
"comment instead of just ``#``), or in a docstring *after* the definition.  "
"Comments need to be either on a line of their own *before* the definition, "
"or immediately after the assignment *on the same line*.  The latter form is "
"restricted to one line only."
msgstr "モジュールのデータメンバーとクラス属性については、特別なフォーマットでコメントの中に (コメントの開始に単に ``#`` を使う代わりに ``#:`` を使用して)、または定義の *後の* docstring の中にドキュメンテーションを入れることができます。コメントは、定義の *前の* それ自身の行、または代入の直後の *同じ行に* 置く必要があります。後者の形式は1行のみに制限されます。"

#: ../../ext/autodoc.rst:254
msgid ""
"This means that in the following class definition, all attributes can be "
"autodocumented::"
msgstr "これが意味するのは、次のクラス定義ですべての属性が autodocument 化できるということです:"

#: ../../ext/autodoc.rst:276
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` can now extract docstrings."
msgstr ":rst:dir:`autodata` と :rst:dir:`autoattribute` がdocstringにも対応しました。"

#: ../../ext/autodoc.rst:279
msgid "Comment docs are now allowed on the same line after an assignment."
msgstr "代入文の直後にコメントドキュメントを書けるようになりました。"

#: ../../ext/autodoc.rst:282
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` have an ``annotation`` "
"option."
msgstr ":rst:dir:`autodata` と :rst:dir:`autoattribute` は ``annotation`` オプションがあります。"

#: ../../ext/autodoc.rst:288
msgid ""
"If you document decorated functions or methods, keep in mind that autodoc "
"retrieves its docstrings by importing the module and inspecting the "
"``__doc__`` attribute of the given function or method.  That means that if a"
" decorator replaces the decorated function with another, it must copy the "
"original ``__doc__`` to the new function."
msgstr "もしもデコレータのついた関数やメソッドのドキュメントを生成する場合には、autodocが、実際にモジュールをインポートして、指定された関数やメソッドの\\ ``__doc__``\\ 属性を見てドキュメントを生成しているということに注意してください。これは、もしデコレートされた関数が他のものに置き換えられる場合には、元の\\ ``__doc__``\\ の内容を新しい関数にもコピーしなければ動作しないということを意味しています。"

#: ../../ext/autodoc.rst:294
msgid ""
"From Python 2.5, :func:`functools.wraps` can be used to create well-behaved "
"decorating functions."
msgstr "Python 2.5以降であれば、\\ :func:`functools.wraps`\\ を使用することで、このあたりまできちんと面倒を見てくれます。"

#: ../../ext/autodoc.rst:298
msgid "There are also new config values that you can set:"
msgstr "autodoc拡張には、新しい設定値がいくつかあります。"

#: ../../ext/autodoc.rst:302
msgid ""
"This value selects what content will be inserted into the main body of an "
":rst:dir:`autoclass` directive.  The possible values are:"
msgstr "この値を指定することで、本体の\\ :rst:dir:`autoclass`\\ ディレクティブにどの内容を追加するのかを選択できます。指定可能な値は以下の通りです:"

#: ../../ext/autodoc.rst:307
msgid "``\"class\"``"
msgstr "``\"class\"``"

#: ../../ext/autodoc.rst:306
msgid ""
"Only the class' docstring is inserted.  This is the default.  You can still "
"document ``__init__`` as a separate method using :rst:dir:`automethod` or "
"the ``members`` option to :rst:dir:`autoclass`."
msgstr "クラスのdocstringだけが挿入されます。これがデフォルトの動作になります。\\ :rst:dir:`automethod`\\ を使用するか、\\ :rst:dir:`autoclass`\\ に対して\\ ``members``\\ オプションを設定することで、\\ ``__init__``\\ の内容は別のメソッドとしてドキュメント化できます。"

#: ../../ext/autodoc.rst:310
msgid "``\"both\"``"
msgstr "``\"both\"``"

#: ../../ext/autodoc.rst:310
msgid ""
"Both the class' and the ``__init__`` method's docstring are concatenated and"
" inserted."
msgstr "クラスのdocstringと、\\ ``__init__``\\ メソッドのdocstringの両方が結合されて挿入されます。"

#: ../../ext/autodoc.rst:313
msgid "``\"init\"``"
msgstr "``\"init\"``"

#: ../../ext/autodoc.rst:313
msgid "Only the ``__init__`` method's docstring is inserted."
msgstr "``__init__``\\ メソッドのdocstringだけが挿入されます。"

#: ../../ext/autodoc.rst:319
msgid ""
"This value selects if automatically documented members are sorted "
"alphabetical (value ``'alphabetical'``), by member type (value "
"``'groupwise'``) or by source order (value ``'bysource'``).  The default is "
"alphabetical."
msgstr "これの設定を変更することで、ドキュメントのついたメンバーをアルファベット順にソートするか(``'alphabetical'``)、もしくはメンバーのタイプによって(``'groupwise'``)ソートするか、ソースコードの定義順(``'bysource'``)にソートするかを変更できます。デフォルトはアルファベット順です。"

#: ../../ext/autodoc.rst:324
msgid ""
"Note that for source order, the module must be a Python module with the "
"source code available."
msgstr "ソースコードの定義順を指定する場合には、対象のモジュールはPythonモジュールで、ソースコードが利用できるようになっていなければなりません。"

#: ../../ext/autodoc.rst:328
msgid "Support for ``'bysource'``."
msgstr "``'bysource'`` をサポートしました。"

#: ../../ext/autodoc.rst:333
msgid ""
"This value is a list of autodoc directive flags that should be automatically"
" applied to all autodoc directives.  The supported flags are ``'members'``, "
"``'undoc-members'``, ``'private-members'``, ``'special-members'``, "
"``'inherited-members'`` and ``'show-inheritance'``."
msgstr "この値には、すべてのautodocディレクティブに対して、自動で適用したいフラグのリストを設定します。設定できるフラグは、 ``'members'``, ``'undoc-members'``, ``'private-members'``, ``'special-members'``, ``'inherited-members'``, ``'show-inheritance'`` です。"

#: ../../ext/autodoc.rst:338
msgid ""
"If you set one of these flags in this config value, you can use a negated "
"form, :samp:`'no-{flag}'`, in an autodoc directive, to disable it once. For "
"example, if ``autodoc_default_flags`` is set to ``['members', 'undoc-"
"members']``, and you write a directive like this::"
msgstr "これらのフラグの一つをこの設定値に設定した場合、否定形の :samp:`'no-{flag}'` をautodocディレクティブの中で指定することで、個別に機能をオフにできます。例えば、 ``autodoc_default_flags`` に ``['members', 'undoc-members']`` と指定した場合::"

#: ../../ext/autodoc.rst:346
msgid "the directive will be interpreted as if only ``:members:`` was given."
msgstr "このように記述すると、 ``:members:`` だけが指定されているという解釈がされます。"

#: ../../ext/autodoc.rst:352
msgid ""
"Functions imported from C modules cannot be introspected, and therefore the "
"signature for such functions cannot be automatically determined.  However, "
"it is an often-used convention to put the signature into the first line of "
"the function's docstring."
msgstr "Cモジュールからインポートされた関数は、情報を取得できないため、これらの関数に関するシグニチャを自動的に決定することはできません。しかし、これを使用すると、これらの関数のdocstringの最初の行に、これらの関数のシグニチャを入れられます。"

#: ../../ext/autodoc.rst:357
msgid ""
"If this boolean value is set to ``True`` (which is the default), autodoc "
"will look at the first line of the docstring for functions and methods, and "
"if it looks like a signature, use the line as the signature and remove it "
"from the docstring content."
msgstr "もしこの設定を ``True`` (デフォルト)にすると、autodocは関数やメソッドのdocstringの最初の行を見て、もしシグニチャのような情報が書かれていたら、その行をシグニチャとして読み込み、docstringからはその行の内容を削除して扱います。"

#: ../../ext/autodoc.rst:366
msgid ""
"This value contains a list of modules to be mocked up. This is useful when "
"some external dependencies are not met at build time and break the building "
"process."
msgstr "この値はモックアップされるモジュールのリストを含みます。これはビルド時もしくはビルド過程の中断時にいくつかの外部依存が満たされない時に有用です。"

#: ../../ext/autodoc.rst:374
msgid "Docstring preprocessing"
msgstr "Docstringのプリプロセス"

#: ../../ext/autodoc.rst:376
msgid "autodoc provides the following additional events:"
msgstr "autodocは以下のイベントを追加で提供します:"

#: ../../ext/autodoc.rst:382
msgid ""
"Emitted when autodoc has read and processed a docstring.  *lines* is a list "
"of strings -- the lines of the processed docstring -- that the event handler"
" can modify **in place** to change what Sphinx puts into the output."
msgstr "autodocがdocstringを読み込んで処理をするタイミングで呼び出されます。\\ *lines*\\ は処理されたdocstringが入っている、文字列のリストです。このリストはイベントハンドラの中で変更でき、この結果を利用します。"

#: ../../ext/autodoc.rst:386 ../../ext/autodoc.rst:406
#: ../../ext/autodoc.rst:443
msgid "the Sphinx application object"
msgstr "Sphinxのアプリケーションオブジェクト"

#: ../../ext/autodoc.rst:387 ../../ext/autodoc.rst:407
#: ../../ext/autodoc.rst:444
msgid ""
"the type of the object which the docstring belongs to (one of "
"``\"module\"``, ``\"class\"``, ``\"exception\"``, ``\"function\"``, "
"``\"method\"``, ``\"attribute\"``)"
msgstr "docstringが属するオブジェクトの型 (以下のうちのどれか ``\"module\"``, ``\"class\"``, ``\"exception\"``, ``\"function\"``, ``\"method\"``, ``\"attribute\"``)"

#: ../../ext/autodoc.rst:390 ../../ext/autodoc.rst:410
#: ../../ext/autodoc.rst:447
msgid "the fully qualified name of the object"
msgstr "オブジェクトの完全な修飾付きの名前"

#: ../../ext/autodoc.rst:391 ../../ext/autodoc.rst:411
#: ../../ext/autodoc.rst:448
msgid "the object itself"
msgstr "オブジェクト自身"

#: ../../ext/autodoc.rst:392 ../../ext/autodoc.rst:412
#: ../../ext/autodoc.rst:451
msgid ""
"the options given to the directive: an object with attributes "
"``inherited_members``, ``undoc_members``, ``show_inheritance`` and "
"``noindex`` that are true if the flag option of same name was given to the "
"auto directive"
msgstr "ディレクティブに与えられたオプションです。 ``inherited_members``, ``undoc_members``, ``show_inheritance``, ``noindex`` などの属性をもったオブジェクトです。同じ名前のフラグオプションが渡されるとtrueになります。"

#: ../../ext/autodoc.rst:396
msgid "the lines of the docstring, see above"
msgstr "docstringの行数。上記を参照。"

#: ../../ext/autodoc.rst:402
msgid ""
"Emitted when autodoc has formatted a signature for an object. The event "
"handler can return a new tuple ``(signature, return_annotation)`` to change "
"what Sphinx puts into the output."
msgstr "autodocがオブジェクトのシグニチャをフォーマットしているときに呼び出されます。イベントハンドラは新しいタプル\\ ``(signature, return_annotation)``\\ を返すことができ、Sphinxはこの出力を使ってドキュメントを生成します。"

#: ../../ext/autodoc.rst:416
msgid ""
"function signature, as a string of the form ``\"(parameter_1, "
"parameter_2)\"``, or ``None`` if introspection didn't succeed and signature "
"wasn't specified in the directive."
msgstr "``\"(parameter_1, parameter_2)\"`` という形式の文字列で示される関数シグニチャか、あるいは、イントロスペクションが成功せず、シグニチャをディレクティブ中で特定できない場合には ``None`` となります。"

#: ../../ext/autodoc.rst:419
msgid ""
"function return annotation as a string of the form ``\" -> annotation\"``, "
"or ``None`` if there is no return annotation"
msgstr "アノテーションを ``\" -> annotation\"`` という形式の文字列で返す関数か、アノテーションを返さない場合は ``None`` となります。"

#: ../../ext/autodoc.rst:422
msgid ""
"The :mod:`sphinx.ext.autodoc` module provides factory functions for commonly"
" needed docstring processing in event :event:`autodoc-process-docstring`:"
msgstr ":mod:`sphinx.ext.autodoc`\\ モジュールでは\\ :event:`autodoc-process-docstring`\\ イベント内でdocstringを処理する上で一般的に必要とされるようなファクトリー関数をいくつか提供しています:"

#: ../../../sphinx/ext/autodoc.pydocstring of sphinx.ext.autodoc.cut_lines:1
msgid ""
"Return a listener that removes the first *pre* and last *post* lines of "
"every docstring.  If *what* is a sequence of strings, only docstrings of a "
"type in *what* will be processed."
msgstr "全てのdocstringの最初の **pre** 行と、最後の **post** 行を削除するリスナーを返します。 **what** として文字列の配列が渡されると、この **what** に含まれているタイプのdocstringだけが処理されます。"

#: ../../../sphinx/ext/autodoc.pydocstring of sphinx.ext.autodoc.cut_lines:5
msgid "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"
msgstr "この関数は :file:`conf.py` の中の ``setup()`` などで、以下のように使用します。"

#: ../../../sphinx/ext/autodoc.pydocstring of sphinx.ext.autodoc.cut_lines:10
msgid ""
"This can (and should) be used in place of :confval:`automodule_skip_lines`."
msgstr "これは :confval:`automodule_skip_lines` の代わりに使用できます (そしてそうすべきです)。"

#: ../../../sphinx/ext/autodoc.pydocstring of sphinx.ext.autodoc.between:1
msgid ""
"Return a listener that either keeps, or if *exclude* is True excludes, lines"
" between lines that match the *marker* regular expression.  If no line "
"matches, the resulting docstring would be empty, so no change will be made "
"unless *keepempty* is true."
msgstr "**marker** の正規表現にマッチしている行の間だけを保持するリスナーを返します。もしも一行もマッチしない場合には、docstringが空になる可能性がありますが、 **keepempty** がtrueでない場合には、変更されません。"

#: ../../../sphinx/ext/autodoc.pydocstring of sphinx.ext.autodoc.between:6
msgid ""
"If *what* is a sequence of strings, only docstrings of a type in *what* will"
" be processed."
msgstr "もしも **what** として、文字列の配列が渡されると、この **what** に含まれているタイプのdocstringだけが処理されます。"

#: ../../ext/autodoc.rst:430
msgid "Skipping members"
msgstr "メンバーのスキップ"

#: ../../ext/autodoc.rst:432
msgid ""
"autodoc allows the user to define a custom method for determining whether a "
"member should be included in the documentation by using the following event:"
msgstr "autodocでは以下のイベントを発行することで、指定されたメンバーをドキュメントに含めるかどうかをユーザが決定できるようになっています:"

#: ../../ext/autodoc.rst:439
msgid ""
"Emitted when autodoc has to decide whether a member should be included in "
"the documentation.  The member is excluded if a handler returns ``True``.  "
"It is included if the handler returns ``False``."
msgstr "autodocがメンバーをドキュメントに含めるかどうかを決定するときに呼ばれます。もしもこのハンドラーが\\ ``True``\\ を返すとメンバーのドキュメントは外されます。\\ ``False``\\ を返すと含まれるようになります。"

#: ../../ext/autodoc.rst:449
msgid ""
"a boolean indicating if autodoc will skip this member if the user handler "
"does not override the decision"
msgstr "ユーザーハンドラーが上書きしない場合に、autodocがこのメンバーを飛ばすかどうかの真偽値。"
