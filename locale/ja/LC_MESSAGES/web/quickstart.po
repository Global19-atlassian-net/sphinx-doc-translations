# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2015, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# 
# Translators:
# Takayuki Shimizukawa <shimizukawa@gmail.com>, 2012-2013
msgid ""
msgstr ""
"Project-Id-Version: sphinx-doc-1.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-11 04:27+0000\n"
"PO-Revision-Date: 2015-09-13 06:05+0000\n"
"Last-Translator: Takayuki Shimizukawa <shimizukawa@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/sphinx-doc/sphinx-doc-1_2_0/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 616ea67d8e5a42c6a0d656994cbbb247
#: ../../web/quickstart.rst:4
msgid "Web Support Quick Start"
msgstr "Webサポートクイックスタート"

# 9062dbcb32854180a5d376510b473893
#: ../../web/quickstart.rst:7
msgid "Building Documentation Data"
msgstr "ドキュメントデータのビルド"

# a555363b9f08444c920298129a73a21b
#: ../../web/quickstart.rst:9
msgid ""
"To make use of the web support package in your application you'll need to "
"build the data it uses.  This data includes pickle files representing "
"documents, search indices, and node data that is used to track where "
"comments and other things are in a document.  To do this you will need to "
"create an instance of the :class:`~.WebSupport` class and call its "
":meth:`~.WebSupport.build` method::"
msgstr "アプリケーションの中でウェブサポートパッケージを使用する場合は、まずはデータを作る必要があります。データには、pickle化されたドキュメントや検索インデックス、コメントなどがどのドキュメントに付加されたのかを追跡するためのノードデータが含まれます。これを行うためには、 :class:`~.WebSupport` クラスのインスタンスを作り、 :meth:`~.WebSupport.build` メソッドを呼ぶ必要があります::"

# 913d8ef09e944cafb58c2c351fca76b8
#: ../../web/quickstart.rst:23
msgid ""
"This will read reStructuredText sources from `srcdir` and place the "
"necessary data in `builddir`.  The `builddir` will contain two sub-"
"directories: one named \"data\" that contains all the data needed to display"
" documents, search through documents, and add comments to documents.  The "
"other directory will be called \"static\" and contains static files that "
"should be served from \"/static\"."
msgstr "このコードは、reStructuredTextのソースコードを `srcdir` から読み込み、必要なデータを `builddir` に書き出します。 `builddir` は二つのサブディレクトリを含みます。 :file:`data` には、ドキュメントを表示したり、ドキュメントを検索したり、ドキュメントにコメントを付けるのに必要なデータがすべて含まれます。もう一つの :file:`static` ディレクトリは、 :file:`'/static'` からファイルを配信するための、静的ファイルを含みます。"

# a3a48fa31da44b8fbbc25175afb00ac9
#: ../../web/quickstart.rst:31
msgid ""
"If you wish to serve static files from a path other than \"/static\", you "
"can do so by providing the *staticdir* keyword argument when creating the "
":class:`~.WebSupport` object."
msgstr "もし \"/static\" 以外のパスから静的ファイルの配信をしたい場合には、 :class:`~.WebSupport` オブジェクトを作る時に、 **staticdir** キーワード引数を指定してください。"

# 37fb38495035410a8b3edc1419d36507
#: ../../web/quickstart.rst:37
msgid "Integrating Sphinx Documents Into Your Webapp"
msgstr "Sphinxドキュメントをウェブアプリケーションに統合"

# 4d25bf6441d64748bb6224458ddfb224
#: ../../web/quickstart.rst:39
msgid ""
"Now that the data is built, it's time to do something useful with it.  Start"
" off by creating a :class:`~.WebSupport` object for your application::"
msgstr "データができましたので、次はこれを使う番です。アプリケーションのための :class:`~.WebSupport` オブジェクトを作るところから始めます::"

# 43472c8a436243caa4a8c4c87d7d4177
#: ../../web/quickstart.rst:47
msgid ""
"You'll only need one of these for each set of documentation you will be "
"working with.  You can then call it's :meth:`~.WebSupport.get_document` "
"method to access individual documents::"
msgstr "次に、個々のドキュメントに対する処理を作っていきます。 :meth:`~.WebSupport.get_document` メソッドを呼ぶと、個々のドキュメントにアクセスすることができます::"

# 08a7a150151540fb97f2444abb1273d3
#: ../../web/quickstart.rst:53
msgid "This will return a dictionary containing the following items:"
msgstr "このメソッドは、次のキーを持つ辞書を返します:"

# c2bd6cfcab1742ed8dc9edf4970050ad
#: ../../web/quickstart.rst:55
msgid "**body**: The main body of the document as HTML"
msgstr "**body**: HTML形式のドキュメント本体です。"

# ee064ef94e3a4d25896cb26202eb79ab
#: ../../web/quickstart.rst:56
msgid "**sidebar**: The sidebar of the document as HTML"
msgstr "**sidebar**: HTML形式のサイドバーです。"

# 71e2f9f3a9404771991dd906d2e5e8d0
#: ../../web/quickstart.rst:57
msgid "**relbar**: A div containing links to related documents"
msgstr "**relbar**: このdivは、関連ドキュメントへのリンクを含んでいます。"

# f4c9a90f22c946e983b1cac8e3e5dfb5
#: ../../web/quickstart.rst:58
msgid "**title**: The title of the document"
msgstr "**title**: ドキュメントのタイトルです。"

# 13190f57a2f74c38906b0ebccf66d186
#: ../../web/quickstart.rst:59
msgid "**css**: Links to css files used by Sphinx"
msgstr "**css**: Sphinxが使用するCSSファイルへのリンクです。"

# 5be901bce8c34cda94f92ecf240d5764
#: ../../web/quickstart.rst:60
msgid "**js**: Javascript containing comment options"
msgstr "**js**: コメントオプションを含むJavascriptです。"

# 5c6478451634420ba8bbfcbb517a20e6
#: ../../web/quickstart.rst:62
msgid ""
"This dict can then be used as context for templates.  The goal is to be easy"
" to integrate with your existing templating system.  An example using "
"`Jinja2 <http://jinja.pocoo.org/>`_ is:"
msgstr "この辞書はテンプレートのコンテキストとして利用できます。これを利用することであなたの既存のテンプレートシステムに簡単に統合出来ます。  `Jinja2 <http://jinja.pocoo.org/>`_ を使った例は以下の通りです:"

# 421b70f95e594f10983bd668e87de642
#: ../../web/quickstart.rst:99
msgid "Authentication"
msgstr "認証"

# 958bfb0bb2814168b48d440bdbb5d96b
#: ../../web/quickstart.rst:101
msgid ""
"To use certain features such as voting, it must be possible to authenticate "
"users.  The details of the authentication are left to your application.  "
"Once a user has been authenticated you can pass the user's details to "
"certain :class:`~.WebSupport` methods using the *username* and *moderator* "
"keyword arguments.  The web support package will store the username with "
"comments and votes.  The only caveat is that if you allow users to change "
"their username you must update the websupport package's data::"
msgstr "投票のような機能を実装する場合、ユーザ認証ができる必要があります。認証をどのように実装するかはアプリケーションに任されています。ユーザが認証されたら、ユーザの情報を :class:`~.WebSupport` のメソッドの *username* と *moderator* キーワード引数に渡すことができます。ウェブサポートパッケージはユーザ名を、コメントや投票と一緒に保存します。注意点を1つあげるとすれば、もしユーザに対して名前の変更を行えるようにするのであれば、ウェブサポートパッケージの内部のユーザ名のデータも更新する必要があります::"

# fc526f3cd04c4cf68c05f44bc7077e09
#: ../../web/quickstart.rst:111
msgid ""
"*username* should be a unique string which identifies a user, and "
"*moderator* should be a boolean representing whether the user has moderation"
" privilieges. The default value for *moderator* is *False*."
msgstr "*username* はユーザを特定するためのユニークな文字列でなければなりません。また、 *moderator* はユーザがモデレート権限を持っているかどうかを表すブール型でなければなりません。 *moderator* のデフォルト値は ``False`` です。"

# 2f56dbb7b2864290bcb9ea50188ea538
#: ../../web/quickstart.rst:115
msgid ""
"An example `Flask <http://flask.pocoo.org/>`_ function that checks whether a"
" user is logged in and then retrieves a document is::"
msgstr "例えば、 `Flask <http://flask.pocoo.org/>`_ を使用して、ユーザがログインしているかどうかを確認し、ドキュメントを読めるようにするには、次のようなコードで行えます::"

# aa452c24a43240efae6cc67e5c0d9fe5
#: ../../web/quickstart.rst:130
msgid ""
"The first thing to notice is that the *docname* is just the request path.  "
"This makes accessing the correct document easy from a single view.  If the "
"user is authenticated, then the username and moderation status are passed "
"along with the docname to :meth:`~.WebSupport.get_document`.  The web "
"support package will then add this data to the ``COMMENT_OPTIONS`` that are "
"used in the template."
msgstr "まず、 *docname* が要求されたパスを表すことに気づきます。これにより、正しいドキュメントへのアクセスが行えます。もしユーザの認証が行われていたら、ユーザ名とモデレート権限情報が :meth:`~.WebSupport.get_document` に渡されます。ウェブサポートパッケージは、テンプレートの中で使用される ``COMMENT_OPTIONS`` をこのデータに付加します。"

# b96ca40190ff4d14bb14288c585615dc
#: ../../web/quickstart.rst:138
msgid ""
"This only works works if your documentation is served from your document "
"root. If it is served from another directory, you will need to prefix the "
"url route with that directory, and give the `docroot` keyword argument when "
"creating the web support object::"
msgstr "このプログラムはドキュメントがルートで提供される場合にのみ動作します。もし、他のディレクトリからドキュメントを提供したい場合には、URLのプリフィックスを指定する必要があります。これは、ウェブサポートオブジェクトを作成する時に、 `docroot` キーワード引数として与えます::"

# 31e8c89f6cc0488ca0de0e7ad5d83262
#: ../../web/quickstart.rst:149
msgid "Performing Searches"
msgstr "検索の実行"

# 8ca12a9cf6d54571a6240a314abb9504
#: ../../web/quickstart.rst:151
msgid ""
"To use the search form built-in to the Sphinx sidebar, create a function to "
"handle requests to the url 'search' relative to the documentation root.  The"
" user's search query will be in the GET parameters, with the key `q`.  Then "
"use the :meth:`~sphinx.websupport.WebSupport.get_search_results` method to "
"retrieve search results. In `Flask <http://flask.pocoo.org/>`_ that would be"
" like this::"
msgstr "Sphinxサイドバーの検索機能を使うと、ドキュメントルート以下の 'search' というパスに対するリクエストが発生します。ユーザの検索クエリーは、GETパラメータの `q` キーに格納されています。 :meth:`~sphinx.websupport.WebSupport.get_search_results` メソッドに渡すと、検索結果が得られます。 `Flask <http://flask.pocoo.org/>`_ では次のようになります::"

# 2d252b06e8b647f08cbb1a9e8464734e
#: ../../web/quickstart.rst:163
msgid ""
"Note that we used the same template to render our search results as we did "
"to render our documents.  That's because "
":meth:`~.WebSupport.get_search_results` returns a context dict in the same "
"format that :meth:`~.WebSupport.get_document` does."
msgstr "ドキュメントと検索結果の表示には、同じテンプレートを使用しています。これは、 :meth:`~.WebSupport.get_search_results` メソッドが、 :meth:`~.WebSupport.get_document` と同じ形式のコンテキスト辞書を返すからです。"

# 91b84b45550c473a89b581062fd38443
#: ../../web/quickstart.rst:170
msgid "Comments & Proposals"
msgstr "コメント＆提案"

# c55034997f8c4cd9b1b7c6721804ff5f
#: ../../web/quickstart.rst:172
msgid ""
"Now that this is done it's time to define the functions that handle the AJAX"
" calls from the script.  You will need three functions.  The first function "
"is used to add a new comment, and will call the web support method "
":meth:`~.WebSupport.add_comment`::"
msgstr "それでは、コメントなどをAJAXで処理するための関数を定義します。3つの関数を定義する必要があります。1つ目は、新しいコメントが投稿されたときに、ウェブサポートオブジェクトの :meth:`~.WebSupport.add_comment` メソッドを呼び出すものです::"

# 6ac578fc986741f9bb27e32a388efd22
#: ../../web/quickstart.rst:189
msgid ""
"You'll notice that both a `parent_id` and `node_id` are sent with the "
"request. If the comment is being attached directly to a node, `parent_id` "
"will be empty. If the comment is a child of another comment, then `node_id` "
"will be empty. Then next function handles the retrieval of comments for a "
"specific node, and is aptly named "
":meth:`~sphinx.websupport.WebSupport.get_data`::"
msgstr "リクエストには、 `parent_id` と `node_id` を送っています。コメントが他のノードに直接追加された場合には、 `parent_id` は空になります。また、コメントが他のコメントの子供として付加された場合には、 `node_id` が空になります。次の関数は、 :meth:`~sphinx.websupport.WebSupport.get_data` メソッドを利用して、特定のノードに対するコメントを取り扱います::"

# c4100372af884e15ae123429fcd9a306
#: ../../web/quickstart.rst:204
msgid ""
"The final function that is needed will call "
":meth:`~.WebSupport.process_vote`, and will handle user votes on comments::"
msgstr "最後の関数は、 :meth:`~.WebSupport.process_vote` を呼び出して、コメントに対するユーザの投票を取り扱う関数です::"

# ec0c26c22234432082748ce8265935b5
#: ../../web/quickstart.rst:220
msgid "Comment Moderation"
msgstr "コメントのモデレート"

# a28d82bb353a435388ba16b4fd4ab6cc
#: ../../web/quickstart.rst:222
msgid ""
"By default, all comments added through :meth:`~.WebSupport.add_comment` are "
"automatically displayed.  If you wish to have some form of moderation, you "
"can pass the `displayed` keyword argument::"
msgstr "デフォルトでは、 :meth:`~.WebSupport.add_comment` を使って追加したすべてのコメントは表示されます。もし、モデレーションを行って、承認されたコメントだけを表示したいのであれば、 `displayed` キーワード引数を渡します::"

# 2570bd4df38d4949a5761f7d295ad79b
#: ../../web/quickstart.rst:231
msgid ""
"You can then create a new view to handle the moderation of comments.  It "
"will be called when a moderator decides a comment should be accepted and "
"displayed::"
msgstr "コメントのモデレートを取り扱うビューを追加する必要があります。モデレータがコメントを受け入れて、表示するかどうかを決定するときに、この関数が呼び出されます::"

# 7386843d1bf64b7086133178a855b0fd
#: ../../web/quickstart.rst:242
msgid "Rejecting comments happens via comment deletion."
msgstr "リジェクトされると、コメントは削除されます。"

# 3c658952d35c48e187be8fdf91371e9c
#: ../../web/quickstart.rst:244
msgid ""
"To perform a custom action (such as emailing a moderator) when a new comment"
" is added but not displayed, you can pass callable to the "
":class:`~.WebSupport` class when instantiating your support object::"
msgstr "非表示の新しいコメントが追加されたときに、Eメールによるモデレートなど、カスタムのアクションを行いたい場合には、 :class:`~.WebSupport` のインスタンスを作る時に、呼び出し可能なオブジェクトを渡します::"

# 8be44250109b4e9784a69d93b70db27b
#: ../../web/quickstart.rst:253
msgid ""
"The moderation callback must take one argument, which will be the same "
"comment dict that is returned by :meth:`add_comment`."
msgstr "このコールバック関数は、 :meth:`add_comment` が返すのと同じ形式の辞書を引数として受け取ります。"
