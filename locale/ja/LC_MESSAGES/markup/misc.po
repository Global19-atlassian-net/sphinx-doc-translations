# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2016, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# 
# Translators:
# Takayuki Shimizukawa <shimizukawa@gmail.com>, 2015
# Tsuyoshi Okawa <tu44okawa3@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: sphinx-doc-1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-24 10:48+0000\n"
"PO-Revision-Date: 2016-01-12 06:23+0000\n"
"Last-Translator: sphinx-users.jp <shimizukawa+sphinxjp@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/sphinx-doc/sphinx-doc-1_3/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../markup/misc.rst:4
msgid "Miscellaneous markup"
msgstr "その他のマークアップ"

#: ../../markup/misc.rst:9
msgid "File-wide metadata"
msgstr "ファイルに関するメタデータ"

#: ../../markup/misc.rst:11
msgid ""
"reST has the concept of \"field lists\"; these are a sequence of fields "
"marked up like this::"
msgstr "reSTには \"フィールドリスト\"という考えがあります。以下のようなものが、このフィールドのマークアップのリストのサンプルになります::"

#: ../../markup/misc.rst:16
msgid ""
"A field list near the top of a file is parsed by docutils as the \"docinfo\""
" which is normally used to record the author, date of publication and other "
"metadata.  *In Sphinx*, a field list preceding any other markup is moved "
"from the docinfo to the Sphinx environment as document metadata and is not "
"displayed in the output; a field list appearing after the document title "
"will be part of the docinfo as normal and will be displayed in the output."
msgstr "docutilsは、ファイルの先頭付近のフィールドリストを \"docinfo\" としてパースします。これは通常のドキュメントでは著者名や、公開日などのメタデータを記録するのに使用されます。 **Sphinxでは**, docinfoはメタデータとして使用されますが、出力はされません。フィールドリストは、ドキュメントのタイトルの後に、いつものように表示されます。"

#: ../../markup/misc.rst:23
msgid "At the moment, these metadata fields are recognized:"
msgstr "このタイミングでは、以下のメタデータのフィールドが識別されています:"

#: ../../markup/misc.rst:28
msgid "``tocdepth``"
msgstr "``tocdepth``"

#: ../../markup/misc.rst:26
msgid "The maximum depth for a table of contents of this file."
msgstr "このファイルに表示する目次の最大の深さ"

#: ../../markup/misc.rst:32
msgid "``nocomments``"
msgstr "``nocomments``"

#: ../../markup/misc.rst:31
msgid ""
"If set, the web application won't display a comment form for a page "
"generated from this source file."
msgstr "もし設定されていれば、このソースファイルから生成されたページをウェブアプリケーションが表示する際には、コメントフォームが表示されなくなります。"

#: ../../markup/misc.rst:39
msgid "``orphan``"
msgstr "``orphan``"

#: ../../markup/misc.rst:35
msgid ""
"If set, warnings about this file not being included in any toctree will be "
"suppressed."
msgstr "もしこれが設定されると、toctreeから参照されていない時に出力される警告が抑制されます。"

#: ../../markup/misc.rst:42
msgid "Meta-information markup"
msgstr "メタ情報マークアップ"

#: ../../markup/misc.rst:46
msgid ""
"Identifies the author of the current section.  The argument should include "
"the author's name such that it can be used for presentation and email "
"address.  The domain name portion of the address should be lower case. "
"Example::"
msgstr "現在のセクションの著者名を指定します。引数には必ず、表示するための著者の名前と、電子メールのアドレスを入れます。アドレスのドメイン名の部分は小文字でなければなりません。 サンプル::"

#: ../../markup/misc.rst:53
msgid ""
"By default, this markup isn't reflected in the output in any way (it helps "
"keep track of contributions), but you can set the configuration value "
":confval:`show_authors` to ``True`` to make them produce a paragraph in the "
"output."
msgstr "デフォルトでは、このマークアップは出力に反映されません(貢献者の名前を調べる手助けにはなります)。しかし、設定ファイルの :confval:`show_authors` を ``True`` に設定すると、出力ファイルの中にこの情報に関する段落が作成されます。"

#: ../../markup/misc.rst:61
msgid ""
"The :rst:dir:`codeauthor` directive, which can appear multiple times, names "
"the authors of the described code, just like :rst:dir:`sectionauthor` names "
"the author(s) of a piece of documentation.  It too only produces output if "
"the :confval:`show_authors` configuration value is ``True``."
msgstr ":rst:dir:`codeauthor` ディレクティブは、 :rst:dir:`sectionauthor` の名前と同じく、説明しているコードの作者名について、複数人書くことができます。 :confval:`show_authors` 設定値を ``True`` にしないかぎり、出力はされません。"

#: ../../markup/misc.rst:68
msgid "Index-generating markup"
msgstr "インデックス生成のためのマークアップ"

#: ../../markup/misc.rst:70
msgid ""
"Sphinx automatically creates index entries from all object descriptions "
"(like functions, classes or attributes) like discussed in :ref:`domains`."
msgstr "Sphinxはすべてのオブジェクトの説明(関数、クラス、属性)から、自動的にインデックスのエントリーを作成します。オブジェクトの説明に関しては、 :ref:`domains` で詳しく説明しています。"

#: ../../markup/misc.rst:73
msgid ""
"However, there is also explicit markup available, to make the index more "
"comprehensive and enable index entries in documents where information is not"
" mainly contained in information units, such as the language reference."
msgstr "しかし、これ以外に明示的に指定するディレクティブもあります。これを使用することで、言語のリファレンスのように、メインの情報のユニットが存在しない情報をドキュメントの中に書いてインデックスのエントリーを作ることができるようになります。より包括的なインデックスを作成できるようになります。"

#: ../../markup/misc.rst:79
msgid ""
"This directive contains one or more index entries.  Each entry consists of a"
" type and a value, separated by a colon."
msgstr "このディレクティブは一つ以上のインデックスのエントリーを含みます。それぞれのエントリーはコロン(:)で区切られた、タイプ、値を含みます。"

#: ../../markup/misc.rst:82
msgid "For example::"
msgstr "例えば::"

#: ../../markup/misc.rst:95
msgid ""
"This directive contains five entries, which will be converted to entries in "
"the generated index which link to the exact location of the index statement "
"(or, in case of offline media, the corresponding page number)."
msgstr "このディレクティブは5つのエントリーを含んでいます。これらは生成されたインデックスのエントリーに変換され、index文の正確な位置へのリンクが張られることになります。オフラインのメディアに出力される場合には、リンクの代わりに対応するページ番号が出力されます。"

#: ../../markup/misc.rst:99
msgid ""
"Since index directives generate cross-reference targets at their location in"
" the source, it makes sense to put them *before* the thing they refer to -- "
"e.g. a heading, as in the example above."
msgstr "indexディレクティブはそのソースの位置のターゲットとのクロスリファレンスを生成するため、それらが参照するものの *前の位置* に置くことが大切になります。上記のサンプルコードの例では、リンクを張りたい見出しの前に配置されています。"

#: ../../markup/misc.rst:103
msgid "The possible entry types are:"
msgstr "設定可能なエントリーのタイプは以下の通りです:"

#: ../../markup/misc.rst:107
msgid "single"
msgstr "single"

#: ../../markup/misc.rst:106
msgid ""
"Creates a single index entry.  Can be made a subentry by separating the "
"subentry text with a semicolon (this notation is also used below to describe"
" what entries are created)."
msgstr "単体のインデックスのエントリーを作成します。 サブエントリーのテキストとの間をセミコロンで区切ることにより、サブエントリーを作ることもできます。この記法はどのエントリーが作成されたのか、という説明のところで詳しく説明します。"

#: ../../markup/misc.rst:110
msgid "pair"
msgstr "pair"

#: ../../markup/misc.rst:110
msgid ""
"``pair: loop; statement`` is a shortcut that creates two index entries, "
"namely ``loop; statement`` and ``statement; loop``."
msgstr "``pair: loop; statement`` はインデックスエントリーを2つ作成します。 ``loop; statement`` と ``statement; loop`` の2つのエントリーが作成されます。"

#: ../../markup/misc.rst:114
msgid "triple"
msgstr "triple"

#: ../../markup/misc.rst:113
msgid ""
"Likewise, ``triple: module; search; path`` is a shortcut that creates three "
"index entries, which are ``module; search path``, ``search; path, module`` "
"and ``path; module search``."
msgstr "pairと似ていますが ``triple: module; search; path`` は3つのエントリーを作成します。 ``module; search path``, ``search; path, module``, ``path; module search`` が作成されます。"

#: ../../markup/misc.rst:117
msgid "see"
msgstr "see"

#: ../../markup/misc.rst:117
msgid ""
"``see: entry; other`` creates an index entry that refers from ``entry`` to "
"``other``."
msgstr "``see: entry; other`` という項目があると、 ``entry`` から ``other`` を参照するインデックスエントリーが作成されます。"

#: ../../markup/misc.rst:119
msgid "seealso"
msgstr "seealso"

#: ../../markup/misc.rst:120
msgid "Like ``see``, but inserts \"see also\" instead of \"see\"."
msgstr "``see`` と似ていますが、 \"see\" の代わりに、 \"see also\" を挿入します。"

#: ../../markup/misc.rst:124
msgid "module, keyword, operator, object, exception, statement, builtin"
msgstr "module, keyword, operator, object, exception, statement, builtin"

#: ../../markup/misc.rst:122
msgid ""
"These all create two index entries.  For example, ``module: hashlib`` "
"creates the entries ``module; hashlib`` and ``hashlib; module``.  (These are"
" Python-specific and therefore deprecated.)"
msgstr "これらはすべて、2つのエントリーを作成します。例えば、 ``module: hashlib`` という項目があると、 ``module; hashlib`` と ``hashlib; module`` の2つのエントリーが作成されます。(これらはPython固有で、deperecatedになっています。)"

#: ../../markup/misc.rst:126
msgid ""
"You can mark up \"main\" index entries by prefixing them with an exclamation"
" mark.  The references to \"main\" entries are emphasized in the generated "
"index.  For example, if two pages contain ::"
msgstr "もしエクスクラメーションマーク(!)を前に付けると、主要なインデックスエントリーである、ということを表現できます。主要なインデックスは、生成されたインデックスの中で強調されます。例えば、2つのページが次のようなディレクティブを持っていたとします::"

#: ../../markup/misc.rst:132
msgid "and one page contains ::"
msgstr "そして、次の内容を含むページがあったとします::"

#: ../../markup/misc.rst:136
msgid ""
"then the backlink to the latter page is emphasized among the three "
"backlinks."
msgstr "この場合、最後のページへのバックリンクが3つの中では強調されて表示されます。"

#: ../../markup/misc.rst:138
msgid ""
"For index directives containing only \"single\" entries, there is a "
"shorthand notation::"
msgstr "\"single\"のエントリーだけが含まれるindexディレクティブの場合、以下のように短縮記法で簡単に作成することもできます::"

#: ../../markup/misc.rst:143
msgid "This creates four index entries."
msgstr "これは4つのインデックスのエントリーが作成されます。"

#: ../../markup/misc.rst:145
msgid "Added ``see`` and ``seealso`` types, as well as marking main entries."
msgstr "``see`` と ``seealso`` を追加しました。"

#: ../../markup/misc.rst:150
msgid ""
"While the :rst:dir:`index` directive is a block-level markup and links to "
"the beginning of the next paragraph, there is also a corresponding role that"
" sets the link target directly where it is used."
msgstr ":rst:dir:`index` ディレクティブは、ブロックレベルのマークアップで、次のパラグラフの先頭に対するリンクを生成します。これとは別に、直接リンクターゲットに設定するロールもあります。"

#: ../../markup/misc.rst:154
msgid ""
"The content of the role can be a simple phrase, which is then kept in the "
"text and used as an index entry.  It can also be a combination of text and "
"index entry, styled like with explicit targets of cross-references.  In that"
" case, the \"target\" part can be a full entry as described for the "
"directive above.  For example::"
msgstr "ロールのコンテンツは、文章の中にあるシンプルなフレーズで、そのままインデックスのエントリーとして使用されます。テキストと入力エントリーの組み合わせになっていて、明示的なクロスリファレンスのターゲットになります。この場合、ターゲットの部分は上記で説明したディレクティブの機能をフルに使うことができます::"

#: ../../markup/misc.rst:169
msgid "Including content based on tags"
msgstr "タグを使用したインクルード"

#: ../../markup/misc.rst:173
msgid ""
"Include the content of the directive only if the *expression* is true.  The "
"expression should consist of tags, like this::"
msgstr "*<式>* が真のときだけ、ディレクティブの内容をインクルードします。式は以下のようにタグで構成されます。"

#: ../../markup/misc.rst:178
msgid ""
"Undefined tags are false, defined tags (via the ``-t`` command-line option "
"or within :file:`conf.py`, see :ref:`here <conf-tags>`) are true.  Boolean "
"expressions, also using parentheses (like ``html and (latex or draft)``) are"
" supported."
msgstr "未定義のタグはfalseになります。定義されたタグ(コマンドラインの ``-t`` オプションもしくは :file:`conf.py` で設定: :ref:`here <conf-tags>` を参照)はtrueとして扱われます。カッコも含めて、ブール演算も使用できます。真偽値の組み合わせとカッコ(``html and (latex or draft)`` というような表現)がサポートされています。"

#: ../../markup/misc.rst:183
msgid ""
"The *format* and the *name* of the current builder (``html``, ``latex`` or "
"``text``) are always set as a tag [#]_.  To make the distinction between "
"format and name explicit, they are also added with the prefix ``format_`` "
"and ``builder_``, e.g. the epub builder defines the tags  ``html``, "
"``epub``, ``format_html`` and ``builder_epub``."
msgstr "現在のビルダー (``html`` 、 ``latex`` 、 ``text``) の *フォーマット* と *名前* が常にタグ [#]_ として設定されます。フォーマットと名前とを明示的に区別するために、 ``format_`` と ``builder_`` というプレフィックスも追加されました。 例: epubビルダーは ``html`` 、 ``epub`` 、 ``format_html`` 、 ``builder_epub`` の４つのタグが定義されます。"

#: ../../markup/misc.rst:189
msgid ""
"These standard tags are set *after* the configuration file is read, so they "
"are not available there."
msgstr "これらの標準タグは、conf.pyを読み込んだ *後* に設定されるため、conf.pyではこれらのタグの有無を参照できません。"

#: ../../markup/misc.rst:192
msgid ""
"All tags must follow the standard Python identifier syntax as set out in the"
" `Identifiers and keywords "
"<https://docs.python.org/reference/lexical_analysis.html#identifiers>`_ "
"documentation.  That is, a tag expression may only consist of tags that "
"conform to the syntax of Python variables.  In ASCII, this consists of the "
"uppercase and lowercase letters ``A`` through ``Z``, the underscore ``_`` "
"and, except for the first character, the digits ``0`` through ``9``."
msgstr "全てのタグはPythonの識別子の文法 `識別子 (identifier) およびキーワード (keyword) <http://docs.python.jp/3/reference/lexical_analysis.html#identifiers>`_ に則って使用する必要があります。これは、タグの書式はPythonの変数として使えるものに限られると言うことです。アスキー文字列でいうと、大文字と小文字の ``A`` から ``Z`` と、アンダースコア ``_`` そして1文字目以外には ``0`` から ``9`` が使用できます。"

#: ../../markup/misc.rst:201
msgid "Added the name of the builder and the prefixes."
msgstr "builder名とプレフィックスが追加されました。"

#: ../../markup/misc.rst:206
msgid "Tables"
msgstr "テーブル"

#: ../../markup/misc.rst:208
msgid ""
"Use :ref:`standard reStructuredText tables <rst-tables>`.  They work fine in"
" HTML output, however there are some gotchas when using tables in LaTeX: the"
" column width is hard to determine correctly automatically.  For this "
"reason, the following directive exists:"
msgstr ":ref:`標準のreStructuredTextの表 <rst-tables>` を使用すると、HTML出力では非常にきれいな表を作成できますが、LaTeXで出力すると、ちょっとがっかりしてしまうでしょう。現在の仕様ではカラムを自動で正しく決定するのは簡単ではありません。このような理由から、それをサポートするディレクティブがいくつか用意されています:"

#: ../../markup/misc.rst:215
msgid ""
"This directive gives a \"column spec\" for the next table occurring in the "
"source file.  The spec is the second argument to the LaTeX ``tabulary`` "
"package's environment (which Sphinx uses to translate tables).  It can have "
"values like ::"
msgstr "このディレクティブは次に作成するテーブルの \"カラム仕様\" を設定します。仕様はSphinxがテーブルの変換に使用している、LaTeXの ``tabulary`` パッケージ環境のためのものです。2番目の引数として設定します。以下のような値を設定します::"

#: ../../markup/misc.rst:222
msgid ""
"which means three left-adjusted, nonbreaking columns.  For columns with "
"longer text that should automatically be broken, use either the standard "
"``p{width}`` construct, or tabulary's automatic specifiers:"
msgstr "これは、３つの左寄せの、改行なしのカラムの意味になります。それぞれのカラムで、長いテキストを適切に自動的に改行させるためには、標準の ``p{width}`` 構造体を使用するか、tabularyの自動設定を使用します。"

#: ../../markup/misc.rst:227
msgid "``L``"
msgstr "``L``"

#: ../../markup/misc.rst:227
msgid "flush left column with automatic width"
msgstr "左寄せのカラム。長さは自動調整。"

#: ../../markup/misc.rst:229
msgid "``R``"
msgstr "``R``"

#: ../../markup/misc.rst:229
msgid "flush right column with automatic width"
msgstr "右寄せのカラム。長さは自動調整。"

#: ../../markup/misc.rst:231
msgid "``C``"
msgstr "``C``"

#: ../../markup/misc.rst:231
msgid "centered column with automatic width"
msgstr "中央寄せのカラム。長さは自動調整。"

#: ../../markup/misc.rst:233
msgid "``J``"
msgstr "``J``"

#: ../../markup/misc.rst:233
msgid "justified column with automatic width"
msgstr "テキストを広げるカラム。長さは自動調整。"

#: ../../markup/misc.rst:236
msgid ""
"The automatic width is determined by rendering the content in the table, and"
" scaling them according to their share of the total width."
msgstr "長さが自動調整となっているものは、全体の長さのうち、それぞれのカラムが占める幅の割合に応じて列の大きさはスケールします。"

#: ../../markup/misc.rst:239
msgid "By default, Sphinx uses a table layout with ``L`` for every column."
msgstr "デフォルトでは、Sphinxはすべてのカラムに対して ``L`` を適用したレイアウトを自動で行います。"

#: ../../markup/misc.rst:245
msgid ""
"Tables that contain list-like elements such as object descriptions, "
"blockquotes or any kind of lists cannot be set out of the box with "
"``tabulary``.  They are therefore set with the standard LaTeX ``tabular`` "
"environment if you don't give a ``tabularcolumns`` directive.  If you do, "
"the table will be set with ``tabulary``, but you must use the ``p{width}`` "
"construct for the columns that contain these elements."
msgstr "オブジェクトの説明などのリストのような要素や、ブロッククオート、リストなどを含むテーブルは、 ``tabulary`` 環境では、箱に並べることはできません。``tabularcolumns`` ディレクティブを与えていない場合は、LaTeX標準の ``tabular`` 環境が使用されます。このような要素を含めようとしている場合、テーブルに ``tabulary`` がセットされますが、これらの要素ほ含むカラムには、 ``p{width}`` コンストラクタを使うようにしてください。"

#: ../../markup/misc.rst:252
msgid ""
"Literal blocks do not work with ``tabulary`` at all, so tables containing a "
"literal block are always set with ``tabular``.  Also, the verbatim "
"environment used for literal blocks only works in ``p{width}`` columns, "
"which means that by default, Sphinx generates such column specs for such "
"tables. Use the :rst:dir:`tabularcolumns` directive to get finer control "
"over such tables."
msgstr "リテラルブロックは ``tabulary`` と一緒にしても、まったく動作しませんが、リテラルブロックを含むテーブルは ``tabular`` をセットします。また、 ``p{width}`` を設定しないと、同様な環境は使用することはできません。デフォルトでは、というのは、Sphinxはそのようなテーブルのためには、そのようなカラムを生成します。 :rst:dir:`tabularcolums` ディレクティブを使用することで、テーブルに対して細かい制御ができるようになります。"

#: ../../markup/misc.rst:260
msgid "Footnotes"
msgstr "脚注"

#: ../../markup/misc.rst:261
msgid ""
"For most builders name and format are the same. At the moment only builders "
"derived from the html builder distinguish between the builder format and the"
" builder name."
msgstr "ほとんどのビルダーでは名前とフォーマットは同じです。現時点ではhtmlビルダーから派生したビルダーだけがビルダーのフォーマットと名前とを区別するために違う値が設定されています。"

#: ../../markup/misc.rst:265
msgid ""
"Note that the current builder tag is not available in ``conf.py``, it is "
"only available after the builder is initialized."
msgstr "現在のビルダーのtagはビルダーの初期化後に確定するため、 ``conf.py`` では提供されないことに注意して下さい。"
