# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2015, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: sphinx-doc-1.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-11 04:27+0000\n"
"PO-Revision-Date: 2014-05-02 06:37+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Spanish (http://www.transifex.com/sphinx-doc/sphinx-doc-1_2_0/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# b061057295cd4406bd06d63604a11291
#: ../../extdev/domainapi.rst:4
msgid "Domain API"
msgstr ""

# 7045958230844872bac3a9b4e2ba7d9a
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Domain:1
msgid ""
"A Domain is meant to be a group of \"object\" description directives for "
"objects of a similar nature, and corresponding roles to create references to"
" them.  Examples would be Python modules, classes, functions etc., elements "
"of a templating language, Sphinx roles and directives, etc."
msgstr ""

# 047295a2ec11413f9b4f830cc2c3d84f
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Domain:6
msgid ""
"Each domain has a separate storage for information about existing objects "
"and how to reference them in `self.data`, which must be a dictionary.  It "
"also must implement several functions that expose the object information in "
"a uniform way to parts of Sphinx that allow the user to reference or search "
"for objects in a domain-agnostic way."
msgstr ""

# e68be1782e214eebb2693cfd4cb860e5
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Domain:12
msgid ""
"About `self.data`: since all object and cross-referencing information is "
"stored on a BuildEnvironment instance, the `domain.data` object is also "
"stored in the `env.domaindata` dict under the key `domain.name`.  Before the"
" build process starts, every active domain is instantiated and given the "
"environment object; the `domaindata` dict must then either be nonexistent or"
" a dictionary whose 'version' key is equal to the domain class' "
":attr:`data_version` attribute.  Otherwise, `IOError` is raised and the "
"pickled environment is discarded."
msgstr ""

# 419742b676634838be667f13a2bf834a
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.clear_doc:1
msgid "Remove traces of a document in the domain-specific inventories."
msgstr ""

# 8fc7d674e61b416e9410ac20899bb711
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.directive:1
msgid ""
"Return a directive adapter class that always gives the registered directive "
"its full name ('domain:name') as ``self.name``."
msgstr ""

# 5408bb21db2043958b21c8a4fe125060
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:1
msgid ""
"Return an iterable of \"object descriptions\", which are tuples with five "
"items:"
msgstr ""

# 5c080f375c6f4113b6fbaa6422500483
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:4
msgid "`name`     -- fully qualified name"
msgstr ""

# 9a771753337544a18a4f7bc22393cd1b
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:5
msgid "`dispname` -- name to display when searching/linking"
msgstr ""

# 16b232dcdba44d66b5659f6840e313cf
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:6
msgid "`type`     -- object type, a key in ``self.object_types``"
msgstr ""

# 025094705e5a45228cd0600237bd2209
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:7
msgid "`docname`  -- the document where it is to be found"
msgstr ""

# 9d084ce9063745d3a04600e546d1d90b
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:8
msgid "`anchor`   -- the anchor name for the object"
msgstr ""

# 3c7bc56edd334555b3565c6d3dd7d210
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:9
msgid ""
"`priority` -- how \"important\" the object is (determines placement in "
"search results)"
msgstr ""

# 86e3aa40699d4d598d9aa4a30be6ab69
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:12
msgid "1: default priority (placed before full-text matches)"
msgstr ""

# fcdc71ac62664b0ca5ecfde9e0f7bf98
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:13
msgid "0: object is important (placed before default-priority objects)"
msgstr ""

# 6259bc08821148f1a4846b2c1aea7da6
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:14
msgid "2: object is unimportant (placed after full-text matches)"
msgstr ""

# 5433a88129894b9b89d3f2506d654b39
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:15
msgid "-1: object should not show up in search at all"
msgstr ""

# 18b505357f044d15a5cfce2be518e90c
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_type_name:1
msgid "Return full name for given ObjType."
msgstr ""

# 4b14cf440a45450a80f1607522e02e4d
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.process_doc:1
msgid "Process a document after it is read by the environment."
msgstr ""

# 9384ffab516a47cf8618a3fd95638600
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:1
msgid "Resolve the pending_xref *node* with the given *typ* and *target*."
msgstr ""

# d776997b685248a691170a36eb8377b1
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:3
msgid ""
"This method should return a new node, to replace the xref node, containing "
"the *contnode* which is the markup content of the cross-reference."
msgstr ""

# da891a5fc20f4c5bb7687ac9ff263d66
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:7
msgid ""
"If no resolution can be found, None can be returned; the xref node will then"
" given to the 'missing-reference' event, and if that yields no resolution, "
"replaced by *contnode*."
msgstr ""

# d2d3c42b92774cfeb36020a142af3722
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:11
msgid ""
"The method can also raise :exc:`sphinx.environment.NoUri` to suppress the "
"'missing-reference' event being emitted."
msgstr ""

# bb177b50e75f4915b3f236d45311a662
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.role:1
msgid ""
"Return a role adapter function that always gives the registered role its "
"full name ('domain:name') as the first argument."
msgstr ""

# bf8cf7cdc8e047068d7b8f797c789964
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.dangling_warnings:1
msgid "role name -> a warning message if reference is missing"
msgstr ""

# db943fd24974465dbd1d702a7219bb9f
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.data_version:1
msgid "data version, bump this when the format of `self.data` changes"
msgstr ""

# 53ce823742c74d729b82fc4bb38fc078
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.directives:1
msgid "directive name -> directive class"
msgstr ""

# 8425a7b6ed894bd497689fe4b79d4a25
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.indices:1
msgid "a list of Index subclasses"
msgstr ""

# fc552dfe93d844df98d17002c4d959f1
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.initial_data:1
msgid "data value for a fresh environment"
msgstr ""

# 2557a436c0f8413a83156c3d4a8a8051
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.label:1
msgid "domain label: longer, more descriptive (used in messages)"
msgstr ""

# 42572578c8724c8ab8e7640561764cd2
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.name:1
msgid "domain name: should be short, but unique"
msgstr ""

# bd89e609f6a7461bb8f5e67ba45f6ada
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.object_types:1
msgid "type (usually directive) name -> ObjType instance"
msgstr ""

# 42233c6031a54794891651ee22d7cb82
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.roles:1
msgid "role name -> role callable"
msgstr ""

# 916f9204a62a4d598e371189192020a4
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.ObjType:1
msgid ""
"An ObjType is the description for a type of object that a domain can "
"document.  In the object_types attribute of Domain subclasses, object type "
"names are mapped to instances of this class."
msgstr ""

# 7dd892608e814495892fd63a2348998e
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.ObjType:5
msgid "Constructor arguments:"
msgstr ""

# af85a54479a6417b8671c0cf5b030428
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.ObjType:7
msgid "*lname*: localized name of the type (do not include domain name)"
msgstr ""

# 0e64ea45d84640d9aabc6ad369320a19
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.ObjType:8
msgid "*roles*: all the roles that can refer to an object of this type"
msgstr ""

# c260f5b8d2434be78cc21e67f390ff30
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.ObjType:9
msgid ""
"*attrs*: object attributes -- currently only \"searchprio\" is known, which "
"defines the object's priority in the full-text search index, see "
":meth:`Domain.get_objects()`."
msgstr ""

# bb5d2430249c4366ad5adac166471dc4
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Index:1
msgid ""
"An Index is the description for a domain-specific index.  To add an index to"
" a domain, subclass Index, overriding the three name attributes:"
msgstr ""

# 7f1a89dcbd6d4cdfba6760dee78a37d4
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Index:4
msgid "`name` is an identifier used for generating file names."
msgstr ""

# 93686b5fc5b04608a2301960e2c4a868
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Index:5
msgid "`localname` is the section title for the index."
msgstr ""

# 897efda4775f48a2bc27cf497cf14d4f
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Index:6
msgid ""
"`shortname` is a short name for the index, for use in the relation bar in "
"HTML output.  Can be empty to disable entries in the relation bar."
msgstr ""

# f1262d2809364a32a670aebdd1bde80d
#: ../../../sphinx/domains/__init__.pydocstring of sphinx.domains.Index:9
msgid ""
"and providing a :meth:`generate()` method.  Then, add the index class to "
"your domain's `indices` list.  Extensions can add indices to existing "
"domains using :meth:`~sphinx.application.Sphinx.add_index_to_domain()`."
msgstr ""

# c0a800cd56154070aa0f52ad926cd1ac
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:1
msgid ""
"Return entries for the index given by *name*.  If *docnames* is given, "
"restrict to entries referring to these docnames."
msgstr ""

# d410a14348eb423e8a50c7e3c1115970
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:4
msgid ""
"The return value is a tuple of ``(content, collapse)``, where *collapse* is "
"a boolean that determines if sub-entries should start collapsed (for output "
"formats that support collapsing sub-entries)."
msgstr ""

# d6c762da281c466f839216017cc77526
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:8
msgid ""
"*content* is a sequence of ``(letter, entries)`` tuples, where *letter* is "
"the \"heading\" for the given *entries*, usually the starting letter."
msgstr ""

# a6099b5390de4c7793aec3fbf28791d5
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:11
msgid ""
"*entries* is a sequence of single entries, where a single entry is a "
"sequence ``[name, subtype, docname, anchor, extra, qualifier, descr]``. The "
"items in this sequence have the following meaning:"
msgstr ""

# c3c11bd8fc8f4ad6bdf853440a7f23f4
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:15
msgid "`name` -- the name of the index entry to be displayed"
msgstr ""

# b6fb3b882f29461385dae0af21eb2f58
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:16
msgid ""
"`subtype` -- sub-entry related type: 0 -- normal entry 1 -- entry with sub-"
"entries 2 -- sub-entry"
msgstr ""

# a8eeaac204dc4d489b1de2791562f04c
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:20
msgid "`docname` -- docname where the entry is located"
msgstr ""

# e814b099777f4b6692715e8a386dc479
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:21
msgid "`anchor` -- anchor for the entry within `docname`"
msgstr ""

# 07ff452014ce4b6e901a098bad98bd8d
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:22
msgid "`extra` -- extra info for the entry"
msgstr ""

# d16aee24f6864e0eafac2cc2ff6ce8ba
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:23
msgid "`qualifier` -- qualifier for the description"
msgstr ""

# 8784143bdac04f07b58dd563b121088b
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:24
msgid "`descr` -- description for the entry"
msgstr ""

# 01c8c20940ee4d91954491887e7ec773
#: ../../../sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:26
msgid "Qualifier and description are not rendered e.g. in LaTeX output."
msgstr ""
